package telebot

import (
	"context"
	"fmt"
	"math/big"
	"strings"

	"github.com/fachebot/evm-grid-bot/internal/logger"
	"github.com/fachebot/evm-grid-bot/internal/svc"
	"github.com/fachebot/evm-grid-bot/internal/telebot/handler/positionhandler"
	"github.com/fachebot/evm-grid-bot/internal/telebot/handler/settingshandler"
	"github.com/fachebot/evm-grid-bot/internal/telebot/handler/strategyhandler"
	"github.com/fachebot/evm-grid-bot/internal/telebot/handler/wallethandler"
	"github.com/fachebot/evm-grid-bot/internal/telebot/pathrouter"
	"github.com/fachebot/evm-grid-bot/internal/utils"
	"github.com/fachebot/evm-grid-bot/internal/utils/evm"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TeleBot struct {
	ctx      context.Context
	cancel   context.CancelFunc
	stopChan chan struct{}
	svcCtx   *svc.ServiceContext
	botApi   *tgbotapi.BotAPI
	router   *pathrouter.Router
}

func NewTeleBot(svcCtx *svc.ServiceContext) (*TeleBot, error) {
	ctx, cancel := context.WithCancel(context.Background())
	botService := &TeleBot{
		ctx:    ctx,
		cancel: cancel,
		svcCtx: svcCtx,
		botApi: svcCtx.BotApi,
		router: pathrouter.NewRouter(),
	}

	botService.initRoutes()
	return botService, nil
}

func (s *TeleBot) initRoutes() {
	s.router.HandleFunc("/home", func(
		ctx context.Context,
		vars map[string]string,
		userId int64,
		update tgbotapi.Update,
	) error {
		return s.handleHome(userId, update)
	})

	positionhandler.InitRoutes(s.svcCtx, s.botApi, s.router)
	settingshandler.InitRoutes(s.svcCtx, s.botApi, s.router)
	strategyhandler.InitRoutes(s.svcCtx, s.botApi, s.router)
	wallethandler.InitRoutes(s.svcCtx, s.botApi, s.router)
}

func (s *TeleBot) Stop() {
	if s.stopChan == nil {
		return
	}

	logger.Infof("[TeleBot] ÂáÜÂ§áÂÅúÊ≠¢ÊúçÂä°")

	s.botApi.StopReceivingUpdates()
	s.cancel()

	<-s.stopChan
	close(s.stopChan)
	s.stopChan = nil

	logger.Infof("[TeleBot] ÊúçÂä°Â∑≤ÁªèÂÅúÊ≠¢")
}

func (s *TeleBot) Start() {
	if s.stopChan != nil {
		return
	}

	s.stopChan = make(chan struct{})
	logger.Infof("[TeleBot] ÂºÄÂßãËøêË°åÊúçÂä°")
	go s.run()
}

func (s *TeleBot) handleHome(userId int64, update tgbotapi.Update) error {
	// Á°Æ‰øùÁîüÊàêË¥¶Êà∑
	w, err := wallethandler.GetUserWallet(s.ctx, s.svcCtx, userId)
	if err != nil {
		return err
	}

	// Êü•ËØ¢Ë¥¶Êà∑‰ΩôÈ¢ù
	balance, err := evm.GetBalance(s.ctx, s.svcCtx.EthClient, w.Account)
	if err != nil {
		return err
	}

	// Ëé∑ÂèñÂÖÉÊï∞ÊçÆ
	tokenmeta, err := s.svcCtx.TokenMetaCache.GetTokenMeta(s.ctx, s.svcCtx.Config.Chain.StablecoinCA)
	if err != nil {
		return err
	}

	// Êü•ËØ¢USD‰ΩôÈ¢ù
	usdBalance, err := evm.GetTokenBalance(s.ctx, s.svcCtx.EthClient, s.svcCtx.Config.Chain.StablecoinCA, w.Account)
	if err != nil {
		usdBalance = big.NewInt(0)
	}

	// ÂõûÂ§çÈ¶ñÈ°µËèúÂçï
	markup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà Á≠ñÁï•", "/strategy"),
			tgbotapi.NewInlineKeyboardButtonData("üìä ‰ªì‰Ωç", "/position"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ Èí±ÂåÖ", "/wallet"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è ËÆæÁΩÆ", "/settings"),
		),
	)
	chainId := s.svcCtx.Config.Chain.Id
	currency := s.svcCtx.Config.Chain.NativeCurrency.Symbol
	stablecoinSymbol := s.svcCtx.Config.Chain.StablecoinSymbol
	text := fmt.Sprintf("%s ÁΩëÊ†ºÊú∫Âô®‰∫∫ | ÁõàÂà©Â¶ÇÊò•Èõ®, Ê∂¶Áâ©Êó†Â£∞, Ê∏ê‰∏∞Êî∂! \n\nüí≥ ÊàëÁöÑÈí±ÂåÖ:\n`%s`\n\nüí∞ %s‰ΩôÈ¢ù: `%s`\nüí∞ %s‰ΩôÈ¢ù: `%s`",
		utils.GetNetworkName(chainId), w.Account, currency, evm.ParseETH(balance).Truncate(5), stablecoinSymbol, evm.ParseUnits(usdBalance, tokenmeta.Decimals).Truncate(5))

	text = text + fmt.Sprintf("\n\n[OKX](%s) | [GMGN](%s) | [BlockExplorer](%s)",
		utils.GetOkxAccountLink(chainId, w.Account), utils.GetGmgnAccountLink(chainId, w.Account), utils.GetBlockExplorerAccountLink(chainId, w.Account))
	_, err = utils.ReplyMessage(s.botApi, update, text, markup)
	if err != nil {
		logger.Debugf("[TeleBot] Â§ÑÁêÜ‰∏ªÈ°µÂ§±Ë¥•, %v", err)
	}

	return nil
}

func (s *TeleBot) handleUpdate(update tgbotapi.Update) {
	// Ëé∑ÂèñÁî®Êà∑ID
	var chat *tgbotapi.Chat
	if update.Message != nil {
		chat = update.Message.Chat
	} else if update.ChannelPost != nil {
		chat = update.ChannelPost.Chat
	} else if update.EditedMessage != nil {
		chat = update.EditedMessage.Chat
	} else if update.CallbackQuery != nil {
		chat = update.CallbackQuery.Message.Chat
	} else {
		return
	}

	userId := chat.ID
	logger.Debugf("[TeleBot] Êî∂Âà∞Êñ∞Ê∂àÊÅØ, chat: %d, username: %s, title: %s, type: %s",
		chat.ID, chat.UserName, chat.Title, chat.Type)

	if chat.Type != "private" {
		return
	}
	if !s.svcCtx.Config.TelegramBot.IsWhiteListUser(userId) {
		utils.SendMessage(s.botApi, userId, "üö´ ÈùûÁôΩÂêçÂçïÁî®Êà∑, ‰∏çÂÖÅËÆ∏‰ΩøÁî®Ê≠§Êú∫Âô®‰∫∫")
		return
	}

	// Â§ÑÁêÜÊñáÊú¨Ê∂àÊÅØ
	if update.Message != nil {
		if update.Message.IsCommand() && update.Message.Text == "/start" {
			err := s.handleHome(userId, update)
			if err != nil {
				logger.Debugf("[TeleBot] Â§ÑÁêÜ‰∏ªÈ°µÂ§±Ë¥•, %v", err)
			}
			return
		}

		if update.Message.IsCommand() && strings.HasPrefix(update.Message.Text, "/start quick ") {
			token := strings.TrimLeft(update.Message.Text, "/start quick ")
			path := strategyhandler.QuickStartStrategyHandler{}.FormatPath(token)
			err := s.router.Execute(s.ctx, path, userId, update)
			if err != nil {
				logger.Debugf("[TeleBot] Â§ÑÁêÜË∑ØÁî±Â§±Ë¥•, path: %s, %v", path, err)
			}
			return
		}

		if update.Message.ReplyToMessage != nil {
			chatId := update.Message.ReplyToMessage.Chat.ID
			messageID := update.Message.ReplyToMessage.MessageID
			route, ok := s.svcCtx.MessageCache.GetRoute(chatId, messageID)
			if ok {
				err := s.router.Execute(s.ctx, route.Path, userId, update)
				if err != nil {
					logger.Debugf("[TeleBot] Â§ÑÁêÜË∑ØÁî±Â§±Ë¥•, path: %s, %v", route.Path, err)
				}
			}
		}

		return
	}

	// Â§ÑÁêÜÂõûË∞ÉÊü•ËØ¢
	if update.CallbackQuery != nil {
		err := s.router.Execute(s.ctx, update.CallbackQuery.Data, userId, update)
		if err == nil {
			cb := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
			if _, err = s.botApi.Request(cb); err != nil {
				logger.Debugf("[TeleBot] ÂõûÁ≠î CallbackQuery Â§±Ë¥•, id: %s, %v", update.CallbackQuery.ID, err)
			}
		} else {
			logger.Errorf("[TeleBot] Â§ÑÁêÜ CallbackQuery Â§±Ë¥•, %v", err)
			cb := tgbotapi.NewCallbackWithAlert(update.CallbackQuery.ID, "Êìç‰ΩúÂ§±Ë¥•, ËØ∑Á®çÂêéÂÜçËØï")
			if _, err = s.botApi.Request(cb); err != nil {
				logger.Debugf("[TeleBot] ÂõûÁ≠î CallbackQuery Â§±Ë¥•, id: %s, %v", update.CallbackQuery.ID, err)
			}
		}
	}
}

func (s *TeleBot) run() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 5
	updates := s.botApi.GetUpdatesChan(u)

	for {
		select {
		case <-s.ctx.Done():
			logger.Infof("[TeleBot] ‰∏ä‰∏ãÊñáÂ∑≤ÂèñÊ∂à")

			s.stopChan <- struct{}{}

			return
		case update := <-updates:
			s.handleUpdate(update)
		}
	}
}
