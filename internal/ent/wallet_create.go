// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/wallet"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WalletCreate is the builder for creating a Wallet entity.
type WalletCreate struct {
	config
	mutation *WalletMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *WalletCreate) SetCreateTime(v time.Time) *WalletCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *WalletCreate) SetNillableCreateTime(v *time.Time) *WalletCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *WalletCreate) SetUpdateTime(v time.Time) *WalletCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *WalletCreate) SetNillableUpdateTime(v *time.Time) *WalletCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUserId sets the "userId" field.
func (_c *WalletCreate) SetUserId(v int64) *WalletCreate {
	_c.mutation.SetUserId(v)
	return _c
}

// SetAccount sets the "account" field.
func (_c *WalletCreate) SetAccount(v string) *WalletCreate {
	_c.mutation.SetAccount(v)
	return _c
}

// SetPassword sets the "password" field.
func (_c *WalletCreate) SetPassword(v string) *WalletCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetPrivateKey sets the "privateKey" field.
func (_c *WalletCreate) SetPrivateKey(v string) *WalletCreate {
	_c.mutation.SetPrivateKey(v)
	return _c
}

// Mutation returns the WalletMutation object of the builder.
func (_c *WalletCreate) Mutation() *WalletMutation {
	return _c.mutation
}

// Save creates the Wallet in the database.
func (_c *WalletCreate) Save(ctx context.Context) (*Wallet, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *WalletCreate) SaveX(ctx context.Context) *Wallet {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WalletCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WalletCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *WalletCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := wallet.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := wallet.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *WalletCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Wallet.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Wallet.update_time"`)}
	}
	if _, ok := _c.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "Wallet.userId"`)}
	}
	if _, ok := _c.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "Wallet.account"`)}
	}
	if v, ok := _c.mutation.Account(); ok {
		if err := wallet.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Wallet.account": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Wallet.password"`)}
	}
	if v, ok := _c.mutation.Password(); ok {
		if err := wallet.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Wallet.password": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "privateKey", err: errors.New(`ent: missing required field "Wallet.privateKey"`)}
	}
	if v, ok := _c.mutation.PrivateKey(); ok {
		if err := wallet.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "privateKey", err: fmt.Errorf(`ent: validator failed for field "Wallet.privateKey": %w`, err)}
		}
	}
	return nil
}

func (_c *WalletCreate) sqlSave(ctx context.Context) (*Wallet, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *WalletCreate) createSpec() (*Wallet, *sqlgraph.CreateSpec) {
	var (
		_node = &Wallet{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(wallet.Table, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(wallet.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(wallet.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.UserId(); ok {
		_spec.SetField(wallet.FieldUserId, field.TypeInt64, value)
		_node.UserId = value
	}
	if value, ok := _c.mutation.Account(); ok {
		_spec.SetField(wallet.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(wallet.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := _c.mutation.PrivateKey(); ok {
		_spec.SetField(wallet.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	return _node, _spec
}

// WalletCreateBulk is the builder for creating many Wallet entities in bulk.
type WalletCreateBulk struct {
	config
	err      error
	builders []*WalletCreate
}

// Save creates the Wallet entities in the database.
func (_c *WalletCreateBulk) Save(ctx context.Context) ([]*Wallet, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Wallet, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *WalletCreateBulk) SaveX(ctx context.Context) []*Wallet {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *WalletCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *WalletCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
