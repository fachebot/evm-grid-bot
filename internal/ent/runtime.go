// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/grid"
	"github.com/fachebot/evm-grid-bot/internal/ent/nonce"
	"github.com/fachebot/evm-grid-bot/internal/ent/order"
	"github.com/fachebot/evm-grid-bot/internal/ent/schema"
	"github.com/fachebot/evm-grid-bot/internal/ent/settings"
	"github.com/fachebot/evm-grid-bot/internal/ent/strategy"
	"github.com/fachebot/evm-grid-bot/internal/ent/wallet"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	gridMixin := schema.Grid{}.Mixin()
	gridMixinFields0 := gridMixin[0].Fields()
	_ = gridMixinFields0
	gridFields := schema.Grid{}.Fields()
	_ = gridFields
	// gridDescCreateTime is the schema descriptor for create_time field.
	gridDescCreateTime := gridMixinFields0[0].Descriptor()
	// grid.DefaultCreateTime holds the default value on creation for the create_time field.
	grid.DefaultCreateTime = gridDescCreateTime.Default.(func() time.Time)
	// gridDescUpdateTime is the schema descriptor for update_time field.
	gridDescUpdateTime := gridMixinFields0[1].Descriptor()
	// grid.DefaultUpdateTime holds the default value on creation for the update_time field.
	grid.DefaultUpdateTime = gridDescUpdateTime.Default.(func() time.Time)
	// grid.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	grid.UpdateDefaultUpdateTime = gridDescUpdateTime.UpdateDefault.(func() time.Time)
	// gridDescGUID is the schema descriptor for guid field.
	gridDescGUID := gridFields[0].Descriptor()
	// grid.GUIDValidator is a validator for the "guid" field. It is called by the builders before save.
	grid.GUIDValidator = gridDescGUID.Validators[0].(func(string) error)
	// gridDescAccount is the schema descriptor for account field.
	gridDescAccount := gridFields[1].Descriptor()
	// grid.AccountValidator is a validator for the "account" field. It is called by the builders before save.
	grid.AccountValidator = gridDescAccount.Validators[0].(func(string) error)
	// gridDescToken is the schema descriptor for token field.
	gridDescToken := gridFields[2].Descriptor()
	// grid.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	grid.TokenValidator = gridDescToken.Validators[0].(func(string) error)
	// gridDescSymbol is the schema descriptor for symbol field.
	gridDescSymbol := gridFields[3].Descriptor()
	// grid.SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	grid.SymbolValidator = gridDescSymbol.Validators[0].(func(string) error)
	// gridDescStrategyId is the schema descriptor for strategyId field.
	gridDescStrategyId := gridFields[4].Descriptor()
	// grid.StrategyIdValidator is a validator for the "strategyId" field. It is called by the builders before save.
	grid.StrategyIdValidator = gridDescStrategyId.Validators[0].(func(string) error)
	// gridDescGridNumber is the schema descriptor for gridNumber field.
	gridDescGridNumber := gridFields[5].Descriptor()
	// grid.GridNumberValidator is a validator for the "gridNumber" field. It is called by the builders before save.
	grid.GridNumberValidator = gridDescGridNumber.Validators[0].(func(int) error)
	nonceMixin := schema.Nonce{}.Mixin()
	nonceMixinFields0 := nonceMixin[0].Fields()
	_ = nonceMixinFields0
	nonceFields := schema.Nonce{}.Fields()
	_ = nonceFields
	// nonceDescCreateTime is the schema descriptor for create_time field.
	nonceDescCreateTime := nonceMixinFields0[0].Descriptor()
	// nonce.DefaultCreateTime holds the default value on creation for the create_time field.
	nonce.DefaultCreateTime = nonceDescCreateTime.Default.(func() time.Time)
	// nonceDescUpdateTime is the schema descriptor for update_time field.
	nonceDescUpdateTime := nonceMixinFields0[1].Descriptor()
	// nonce.DefaultUpdateTime holds the default value on creation for the update_time field.
	nonce.DefaultUpdateTime = nonceDescUpdateTime.Default.(func() time.Time)
	// nonce.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	nonce.UpdateDefaultUpdateTime = nonceDescUpdateTime.UpdateDefault.(func() time.Time)
	// nonceDescAccount is the schema descriptor for account field.
	nonceDescAccount := nonceFields[0].Descriptor()
	// nonce.AccountValidator is a validator for the "account" field. It is called by the builders before save.
	nonce.AccountValidator = nonceDescAccount.Validators[0].(func(string) error)
	orderMixin := schema.Order{}.Mixin()
	orderMixinFields0 := orderMixin[0].Fields()
	_ = orderMixinFields0
	orderFields := schema.Order{}.Fields()
	_ = orderFields
	// orderDescCreateTime is the schema descriptor for create_time field.
	orderDescCreateTime := orderMixinFields0[0].Descriptor()
	// order.DefaultCreateTime holds the default value on creation for the create_time field.
	order.DefaultCreateTime = orderDescCreateTime.Default.(func() time.Time)
	// orderDescUpdateTime is the schema descriptor for update_time field.
	orderDescUpdateTime := orderMixinFields0[1].Descriptor()
	// order.DefaultUpdateTime holds the default value on creation for the update_time field.
	order.DefaultUpdateTime = orderDescUpdateTime.Default.(func() time.Time)
	// order.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	order.UpdateDefaultUpdateTime = orderDescUpdateTime.UpdateDefault.(func() time.Time)
	// orderDescAccount is the schema descriptor for account field.
	orderDescAccount := orderFields[0].Descriptor()
	// order.AccountValidator is a validator for the "account" field. It is called by the builders before save.
	order.AccountValidator = orderDescAccount.Validators[0].(func(string) error)
	// orderDescToken is the schema descriptor for token field.
	orderDescToken := orderFields[1].Descriptor()
	// order.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	order.TokenValidator = orderDescToken.Validators[0].(func(string) error)
	// orderDescSymbol is the schema descriptor for symbol field.
	orderDescSymbol := orderFields[2].Descriptor()
	// order.SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	order.SymbolValidator = orderDescSymbol.Validators[0].(func(string) error)
	// orderDescGridId is the schema descriptor for gridId field.
	orderDescGridId := orderFields[3].Descriptor()
	// order.GridIdValidator is a validator for the "gridId" field. It is called by the builders before save.
	order.GridIdValidator = orderDescGridId.Validators[0].(func(string) error)
	// orderDescStrategyId is the schema descriptor for strategyId field.
	orderDescStrategyId := orderFields[6].Descriptor()
	// order.StrategyIdValidator is a validator for the "strategyId" field. It is called by the builders before save.
	order.StrategyIdValidator = orderDescStrategyId.Validators[0].(func(string) error)
	// orderDescTxHash is the schema descriptor for txHash field.
	orderDescTxHash := orderFields[14].Descriptor()
	// order.TxHashValidator is a validator for the "txHash" field. It is called by the builders before save.
	order.TxHashValidator = orderDescTxHash.Validators[0].(func(string) error)
	// orderDescReason is the schema descriptor for reason field.
	orderDescReason := orderFields[15].Descriptor()
	// order.ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	order.ReasonValidator = orderDescReason.Validators[0].(func(string) error)
	settingsMixin := schema.Settings{}.Mixin()
	settingsMixinFields0 := settingsMixin[0].Fields()
	_ = settingsMixinFields0
	settingsFields := schema.Settings{}.Fields()
	_ = settingsFields
	// settingsDescCreateTime is the schema descriptor for create_time field.
	settingsDescCreateTime := settingsMixinFields0[0].Descriptor()
	// settings.DefaultCreateTime holds the default value on creation for the create_time field.
	settings.DefaultCreateTime = settingsDescCreateTime.Default.(func() time.Time)
	// settingsDescUpdateTime is the schema descriptor for update_time field.
	settingsDescUpdateTime := settingsMixinFields0[1].Descriptor()
	// settings.DefaultUpdateTime holds the default value on creation for the update_time field.
	settings.DefaultUpdateTime = settingsDescUpdateTime.Default.(func() time.Time)
	// settings.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	settings.UpdateDefaultUpdateTime = settingsDescUpdateTime.UpdateDefault.(func() time.Time)
	// settingsDescSlippageBps is the schema descriptor for slippageBps field.
	settingsDescSlippageBps := settingsFields[1].Descriptor()
	// settings.SlippageBpsValidator is a validator for the "slippageBps" field. It is called by the builders before save.
	settings.SlippageBpsValidator = settingsDescSlippageBps.Validators[0].(func(int) error)
	// settingsDescSellSlippageBps is the schema descriptor for sellSlippageBps field.
	settingsDescSellSlippageBps := settingsFields[2].Descriptor()
	// settings.SellSlippageBpsValidator is a validator for the "sellSlippageBps" field. It is called by the builders before save.
	settings.SellSlippageBpsValidator = settingsDescSellSlippageBps.Validators[0].(func(int) error)
	// settingsDescExitSlippageBps is the schema descriptor for exitSlippageBps field.
	settingsDescExitSlippageBps := settingsFields[3].Descriptor()
	// settings.ExitSlippageBpsValidator is a validator for the "exitSlippageBps" field. It is called by the builders before save.
	settings.ExitSlippageBpsValidator = settingsDescExitSlippageBps.Validators[0].(func(int) error)
	strategyMixin := schema.Strategy{}.Mixin()
	strategyMixinFields0 := strategyMixin[0].Fields()
	_ = strategyMixinFields0
	strategyFields := schema.Strategy{}.Fields()
	_ = strategyFields
	// strategyDescCreateTime is the schema descriptor for create_time field.
	strategyDescCreateTime := strategyMixinFields0[0].Descriptor()
	// strategy.DefaultCreateTime holds the default value on creation for the create_time field.
	strategy.DefaultCreateTime = strategyDescCreateTime.Default.(func() time.Time)
	// strategyDescUpdateTime is the schema descriptor for update_time field.
	strategyDescUpdateTime := strategyMixinFields0[1].Descriptor()
	// strategy.DefaultUpdateTime holds the default value on creation for the update_time field.
	strategy.DefaultUpdateTime = strategyDescUpdateTime.Default.(func() time.Time)
	// strategy.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	strategy.UpdateDefaultUpdateTime = strategyDescUpdateTime.UpdateDefault.(func() time.Time)
	// strategyDescGUID is the schema descriptor for guid field.
	strategyDescGUID := strategyFields[0].Descriptor()
	// strategy.GUIDValidator is a validator for the "guid" field. It is called by the builders before save.
	strategy.GUIDValidator = strategyDescGUID.Validators[0].(func(string) error)
	// strategyDescToken is the schema descriptor for token field.
	strategyDescToken := strategyFields[2].Descriptor()
	// strategy.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	strategy.TokenValidator = strategyDescToken.Validators[0].(func(string) error)
	// strategyDescSymbol is the schema descriptor for symbol field.
	strategyDescSymbol := strategyFields[3].Descriptor()
	// strategy.SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	strategy.SymbolValidator = strategyDescSymbol.Validators[0].(func(string) error)
	// strategyDescMartinFactor is the schema descriptor for martinFactor field.
	strategyDescMartinFactor := strategyFields[4].Descriptor()
	// strategy.MartinFactorValidator is a validator for the "martinFactor" field. It is called by the builders before save.
	strategy.MartinFactorValidator = strategyDescMartinFactor.Validators[0].(func(float64) error)
	// strategyDescMaxGridLimit is the schema descriptor for maxGridLimit field.
	strategyDescMaxGridLimit := strategyFields[5].Descriptor()
	// strategy.MaxGridLimitValidator is a validator for the "maxGridLimit" field. It is called by the builders before save.
	strategy.MaxGridLimitValidator = strategyDescMaxGridLimit.Validators[0].(func(int) error)
	// strategyDescCandlesToCheck is the schema descriptor for candlesToCheck field.
	strategyDescCandlesToCheck := strategyFields[19].Descriptor()
	// strategy.DefaultCandlesToCheck holds the default value on creation for the candlesToCheck field.
	strategy.DefaultCandlesToCheck = strategyDescCandlesToCheck.Default.(int)
	walletMixin := schema.Wallet{}.Mixin()
	walletMixinFields0 := walletMixin[0].Fields()
	_ = walletMixinFields0
	walletFields := schema.Wallet{}.Fields()
	_ = walletFields
	// walletDescCreateTime is the schema descriptor for create_time field.
	walletDescCreateTime := walletMixinFields0[0].Descriptor()
	// wallet.DefaultCreateTime holds the default value on creation for the create_time field.
	wallet.DefaultCreateTime = walletDescCreateTime.Default.(func() time.Time)
	// walletDescUpdateTime is the schema descriptor for update_time field.
	walletDescUpdateTime := walletMixinFields0[1].Descriptor()
	// wallet.DefaultUpdateTime holds the default value on creation for the update_time field.
	wallet.DefaultUpdateTime = walletDescUpdateTime.Default.(func() time.Time)
	// wallet.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	wallet.UpdateDefaultUpdateTime = walletDescUpdateTime.UpdateDefault.(func() time.Time)
	// walletDescAccount is the schema descriptor for account field.
	walletDescAccount := walletFields[1].Descriptor()
	// wallet.AccountValidator is a validator for the "account" field. It is called by the builders before save.
	wallet.AccountValidator = walletDescAccount.Validators[0].(func(string) error)
	// walletDescPassword is the schema descriptor for password field.
	walletDescPassword := walletFields[2].Descriptor()
	// wallet.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	wallet.PasswordValidator = walletDescPassword.Validators[0].(func(string) error)
	// walletDescPrivateKey is the schema descriptor for privateKey field.
	walletDescPrivateKey := walletFields[3].Descriptor()
	// wallet.PrivateKeyValidator is a validator for the "privateKey" field. It is called by the builders before save.
	wallet.PrivateKeyValidator = walletDescPrivateKey.Validators[0].(func(string) error)
}
