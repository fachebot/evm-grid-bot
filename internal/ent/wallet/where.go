// Code generated by ent, DO NOT EDIT.

package wallet

import (
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUpdateTime, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUserId, v))
}

// Account applies equality check predicate on the "account" field. It's identical to AccountEQ.
func Account(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldAccount, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldPassword, v))
}

// PrivateKey applies equality check predicate on the "privateKey" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldPrivateKey, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldUpdateTime, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldUserId, v))
}

// AccountEQ applies the EQ predicate on the "account" field.
func AccountEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldAccount, v))
}

// AccountNEQ applies the NEQ predicate on the "account" field.
func AccountNEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldAccount, v))
}

// AccountIn applies the In predicate on the "account" field.
func AccountIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldAccount, vs...))
}

// AccountNotIn applies the NotIn predicate on the "account" field.
func AccountNotIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldAccount, vs...))
}

// AccountGT applies the GT predicate on the "account" field.
func AccountGT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldAccount, v))
}

// AccountGTE applies the GTE predicate on the "account" field.
func AccountGTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldAccount, v))
}

// AccountLT applies the LT predicate on the "account" field.
func AccountLT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldAccount, v))
}

// AccountLTE applies the LTE predicate on the "account" field.
func AccountLTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldAccount, v))
}

// AccountContains applies the Contains predicate on the "account" field.
func AccountContains(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContains(FieldAccount, v))
}

// AccountHasPrefix applies the HasPrefix predicate on the "account" field.
func AccountHasPrefix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasPrefix(FieldAccount, v))
}

// AccountHasSuffix applies the HasSuffix predicate on the "account" field.
func AccountHasSuffix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasSuffix(FieldAccount, v))
}

// AccountEqualFold applies the EqualFold predicate on the "account" field.
func AccountEqualFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEqualFold(FieldAccount, v))
}

// AccountContainsFold applies the ContainsFold predicate on the "account" field.
func AccountContainsFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContainsFold(FieldAccount, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContainsFold(FieldPassword, v))
}

// PrivateKeyEQ applies the EQ predicate on the "privateKey" field.
func PrivateKeyEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyNEQ applies the NEQ predicate on the "privateKey" field.
func PrivateKeyNEQ(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNEQ(FieldPrivateKey, v))
}

// PrivateKeyIn applies the In predicate on the "privateKey" field.
func PrivateKeyIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldIn(FieldPrivateKey, vs...))
}

// PrivateKeyNotIn applies the NotIn predicate on the "privateKey" field.
func PrivateKeyNotIn(vs ...string) predicate.Wallet {
	return predicate.Wallet(sql.FieldNotIn(FieldPrivateKey, vs...))
}

// PrivateKeyGT applies the GT predicate on the "privateKey" field.
func PrivateKeyGT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGT(FieldPrivateKey, v))
}

// PrivateKeyGTE applies the GTE predicate on the "privateKey" field.
func PrivateKeyGTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldGTE(FieldPrivateKey, v))
}

// PrivateKeyLT applies the LT predicate on the "privateKey" field.
func PrivateKeyLT(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLT(FieldPrivateKey, v))
}

// PrivateKeyLTE applies the LTE predicate on the "privateKey" field.
func PrivateKeyLTE(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldLTE(FieldPrivateKey, v))
}

// PrivateKeyContains applies the Contains predicate on the "privateKey" field.
func PrivateKeyContains(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContains(FieldPrivateKey, v))
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "privateKey" field.
func PrivateKeyHasPrefix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasPrefix(FieldPrivateKey, v))
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "privateKey" field.
func PrivateKeyHasSuffix(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldHasSuffix(FieldPrivateKey, v))
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "privateKey" field.
func PrivateKeyEqualFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldEqualFold(FieldPrivateKey, v))
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "privateKey" field.
func PrivateKeyContainsFold(v string) predicate.Wallet {
	return predicate.Wallet(sql.FieldContainsFold(FieldPrivateKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Wallet) predicate.Wallet {
	return predicate.Wallet(sql.NotPredicates(p))
}
