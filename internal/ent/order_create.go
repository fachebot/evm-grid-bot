// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/order"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *OrderCreate) SetCreateTime(v time.Time) *OrderCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *OrderCreate) SetNillableCreateTime(v *time.Time) *OrderCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *OrderCreate) SetUpdateTime(v time.Time) *OrderCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *OrderCreate) SetNillableUpdateTime(v *time.Time) *OrderCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetAccount sets the "account" field.
func (_c *OrderCreate) SetAccount(v string) *OrderCreate {
	_c.mutation.SetAccount(v)
	return _c
}

// SetToken sets the "token" field.
func (_c *OrderCreate) SetToken(v string) *OrderCreate {
	_c.mutation.SetToken(v)
	return _c
}

// SetSymbol sets the "symbol" field.
func (_c *OrderCreate) SetSymbol(v string) *OrderCreate {
	_c.mutation.SetSymbol(v)
	return _c
}

// SetGridId sets the "gridId" field.
func (_c *OrderCreate) SetGridId(v string) *OrderCreate {
	_c.mutation.SetGridId(v)
	return _c
}

// SetNillableGridId sets the "gridId" field if the given value is not nil.
func (_c *OrderCreate) SetNillableGridId(v *string) *OrderCreate {
	if v != nil {
		_c.SetGridId(*v)
	}
	return _c
}

// SetGridNumber sets the "gridNumber" field.
func (_c *OrderCreate) SetGridNumber(v int) *OrderCreate {
	_c.mutation.SetGridNumber(v)
	return _c
}

// SetNillableGridNumber sets the "gridNumber" field if the given value is not nil.
func (_c *OrderCreate) SetNillableGridNumber(v *int) *OrderCreate {
	if v != nil {
		_c.SetGridNumber(*v)
	}
	return _c
}

// SetGridBuyCost sets the "gridBuyCost" field.
func (_c *OrderCreate) SetGridBuyCost(v decimal.Decimal) *OrderCreate {
	_c.mutation.SetGridBuyCost(v)
	return _c
}

// SetNillableGridBuyCost sets the "gridBuyCost" field if the given value is not nil.
func (_c *OrderCreate) SetNillableGridBuyCost(v *decimal.Decimal) *OrderCreate {
	if v != nil {
		_c.SetGridBuyCost(*v)
	}
	return _c
}

// SetStrategyId sets the "strategyId" field.
func (_c *OrderCreate) SetStrategyId(v string) *OrderCreate {
	_c.mutation.SetStrategyId(v)
	return _c
}

// SetType sets the "type" field.
func (_c *OrderCreate) SetType(v order.Type) *OrderCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetPrice sets the "price" field.
func (_c *OrderCreate) SetPrice(v decimal.Decimal) *OrderCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetFinalPrice sets the "finalPrice" field.
func (_c *OrderCreate) SetFinalPrice(v decimal.Decimal) *OrderCreate {
	_c.mutation.SetFinalPrice(v)
	return _c
}

// SetInAmount sets the "inAmount" field.
func (_c *OrderCreate) SetInAmount(v decimal.Decimal) *OrderCreate {
	_c.mutation.SetInAmount(v)
	return _c
}

// SetOutAmount sets the "outAmount" field.
func (_c *OrderCreate) SetOutAmount(v decimal.Decimal) *OrderCreate {
	_c.mutation.SetOutAmount(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *OrderCreate) SetStatus(v order.Status) *OrderCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNonce sets the "nonce" field.
func (_c *OrderCreate) SetNonce(v uint64) *OrderCreate {
	_c.mutation.SetNonce(v)
	return _c
}

// SetTxHash sets the "txHash" field.
func (_c *OrderCreate) SetTxHash(v string) *OrderCreate {
	_c.mutation.SetTxHash(v)
	return _c
}

// SetReason sets the "reason" field.
func (_c *OrderCreate) SetReason(v string) *OrderCreate {
	_c.mutation.SetReason(v)
	return _c
}

// SetProfit sets the "profit" field.
func (_c *OrderCreate) SetProfit(v decimal.Decimal) *OrderCreate {
	_c.mutation.SetProfit(v)
	return _c
}

// SetNillableProfit sets the "profit" field if the given value is not nil.
func (_c *OrderCreate) SetNillableProfit(v *decimal.Decimal) *OrderCreate {
	if v != nil {
		_c.SetProfit(*v)
	}
	return _c
}

// Mutation returns the OrderMutation object of the builder.
func (_c *OrderCreate) Mutation() *OrderMutation {
	return _c.mutation
}

// Save creates the Order in the database.
func (_c *OrderCreate) Save(ctx context.Context) (*Order, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrderCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := order.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := order.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrderCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Order.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Order.update_time"`)}
	}
	if _, ok := _c.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "Order.account"`)}
	}
	if v, ok := _c.mutation.Account(); ok {
		if err := order.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Order.account": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Order.token"`)}
	}
	if v, ok := _c.mutation.Token(); ok {
		if err := order.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Order.token": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Order.symbol"`)}
	}
	if v, ok := _c.mutation.Symbol(); ok {
		if err := order.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Order.symbol": %w`, err)}
		}
	}
	if v, ok := _c.mutation.GridId(); ok {
		if err := order.GridIdValidator(v); err != nil {
			return &ValidationError{Name: "gridId", err: fmt.Errorf(`ent: validator failed for field "Order.gridId": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StrategyId(); !ok {
		return &ValidationError{Name: "strategyId", err: errors.New(`ent: missing required field "Order.strategyId"`)}
	}
	if v, ok := _c.mutation.StrategyId(); ok {
		if err := order.StrategyIdValidator(v); err != nil {
			return &ValidationError{Name: "strategyId", err: fmt.Errorf(`ent: validator failed for field "Order.strategyId": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Order.type"`)}
	}
	if v, ok := _c.mutation.GetType(); ok {
		if err := order.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Order.type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Order.price"`)}
	}
	if _, ok := _c.mutation.FinalPrice(); !ok {
		return &ValidationError{Name: "finalPrice", err: errors.New(`ent: missing required field "Order.finalPrice"`)}
	}
	if _, ok := _c.mutation.InAmount(); !ok {
		return &ValidationError{Name: "inAmount", err: errors.New(`ent: missing required field "Order.inAmount"`)}
	}
	if _, ok := _c.mutation.OutAmount(); !ok {
		return &ValidationError{Name: "outAmount", err: errors.New(`ent: missing required field "Order.outAmount"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`ent: missing required field "Order.nonce"`)}
	}
	if _, ok := _c.mutation.TxHash(); !ok {
		return &ValidationError{Name: "txHash", err: errors.New(`ent: missing required field "Order.txHash"`)}
	}
	if v, ok := _c.mutation.TxHash(); ok {
		if err := order.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "txHash", err: fmt.Errorf(`ent: validator failed for field "Order.txHash": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Order.reason"`)}
	}
	if v, ok := _c.mutation.Reason(); ok {
		if err := order.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "Order.reason": %w`, err)}
		}
	}
	return nil
}

func (_c *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(order.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.Account(); ok {
		_spec.SetField(order.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if value, ok := _c.mutation.Token(); ok {
		_spec.SetField(order.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := _c.mutation.Symbol(); ok {
		_spec.SetField(order.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := _c.mutation.GridId(); ok {
		_spec.SetField(order.FieldGridId, field.TypeString, value)
		_node.GridId = &value
	}
	if value, ok := _c.mutation.GridNumber(); ok {
		_spec.SetField(order.FieldGridNumber, field.TypeInt, value)
		_node.GridNumber = &value
	}
	if value, ok := _c.mutation.GridBuyCost(); ok {
		_spec.SetField(order.FieldGridBuyCost, field.TypeString, value)
		_node.GridBuyCost = &value
	}
	if value, ok := _c.mutation.StrategyId(); ok {
		_spec.SetField(order.FieldStrategyId, field.TypeString, value)
		_node.StrategyId = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeString, value)
		_node.Price = value
	}
	if value, ok := _c.mutation.FinalPrice(); ok {
		_spec.SetField(order.FieldFinalPrice, field.TypeString, value)
		_node.FinalPrice = value
	}
	if value, ok := _c.mutation.InAmount(); ok {
		_spec.SetField(order.FieldInAmount, field.TypeString, value)
		_node.InAmount = value
	}
	if value, ok := _c.mutation.OutAmount(); ok {
		_spec.SetField(order.FieldOutAmount, field.TypeString, value)
		_node.OutAmount = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Nonce(); ok {
		_spec.SetField(order.FieldNonce, field.TypeUint64, value)
		_node.Nonce = value
	}
	if value, ok := _c.mutation.TxHash(); ok {
		_spec.SetField(order.FieldTxHash, field.TypeString, value)
		_node.TxHash = value
	}
	if value, ok := _c.mutation.Reason(); ok {
		_spec.SetField(order.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := _c.mutation.Profit(); ok {
		_spec.SetField(order.FieldProfit, field.TypeString, value)
		_node.Profit = &value
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (_c *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Order, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
