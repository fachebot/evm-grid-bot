// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/grid"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// GridCreate is the builder for creating a Grid entity.
type GridCreate struct {
	config
	mutation *GridMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *GridCreate) SetCreateTime(v time.Time) *GridCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *GridCreate) SetNillableCreateTime(v *time.Time) *GridCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *GridCreate) SetUpdateTime(v time.Time) *GridCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *GridCreate) SetNillableUpdateTime(v *time.Time) *GridCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetGUID sets the "guid" field.
func (_c *GridCreate) SetGUID(v string) *GridCreate {
	_c.mutation.SetGUID(v)
	return _c
}

// SetAccount sets the "account" field.
func (_c *GridCreate) SetAccount(v string) *GridCreate {
	_c.mutation.SetAccount(v)
	return _c
}

// SetToken sets the "token" field.
func (_c *GridCreate) SetToken(v string) *GridCreate {
	_c.mutation.SetToken(v)
	return _c
}

// SetSymbol sets the "symbol" field.
func (_c *GridCreate) SetSymbol(v string) *GridCreate {
	_c.mutation.SetSymbol(v)
	return _c
}

// SetStrategyId sets the "strategyId" field.
func (_c *GridCreate) SetStrategyId(v string) *GridCreate {
	_c.mutation.SetStrategyId(v)
	return _c
}

// SetGridNumber sets the "gridNumber" field.
func (_c *GridCreate) SetGridNumber(v int) *GridCreate {
	_c.mutation.SetGridNumber(v)
	return _c
}

// SetOrderPrice sets the "orderPrice" field.
func (_c *GridCreate) SetOrderPrice(v decimal.Decimal) *GridCreate {
	_c.mutation.SetOrderPrice(v)
	return _c
}

// SetFinalPrice sets the "finalPrice" field.
func (_c *GridCreate) SetFinalPrice(v decimal.Decimal) *GridCreate {
	_c.mutation.SetFinalPrice(v)
	return _c
}

// SetAmount sets the "amount" field.
func (_c *GridCreate) SetAmount(v decimal.Decimal) *GridCreate {
	_c.mutation.SetAmount(v)
	return _c
}

// SetQuantity sets the "quantity" field.
func (_c *GridCreate) SetQuantity(v decimal.Decimal) *GridCreate {
	_c.mutation.SetQuantity(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *GridCreate) SetStatus(v grid.Status) *GridCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// Mutation returns the GridMutation object of the builder.
func (_c *GridCreate) Mutation() *GridMutation {
	return _c.mutation
}

// Save creates the Grid in the database.
func (_c *GridCreate) Save(ctx context.Context) (*Grid, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GridCreate) SaveX(ctx context.Context) *Grid {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GridCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GridCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GridCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := grid.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := grid.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GridCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Grid.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Grid.update_time"`)}
	}
	if _, ok := _c.mutation.GUID(); !ok {
		return &ValidationError{Name: "guid", err: errors.New(`ent: missing required field "Grid.guid"`)}
	}
	if v, ok := _c.mutation.GUID(); ok {
		if err := grid.GUIDValidator(v); err != nil {
			return &ValidationError{Name: "guid", err: fmt.Errorf(`ent: validator failed for field "Grid.guid": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "Grid.account"`)}
	}
	if v, ok := _c.mutation.Account(); ok {
		if err := grid.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Grid.account": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Grid.token"`)}
	}
	if v, ok := _c.mutation.Token(); ok {
		if err := grid.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Grid.token": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Grid.symbol"`)}
	}
	if v, ok := _c.mutation.Symbol(); ok {
		if err := grid.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Grid.symbol": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StrategyId(); !ok {
		return &ValidationError{Name: "strategyId", err: errors.New(`ent: missing required field "Grid.strategyId"`)}
	}
	if v, ok := _c.mutation.StrategyId(); ok {
		if err := grid.StrategyIdValidator(v); err != nil {
			return &ValidationError{Name: "strategyId", err: fmt.Errorf(`ent: validator failed for field "Grid.strategyId": %w`, err)}
		}
	}
	if _, ok := _c.mutation.GridNumber(); !ok {
		return &ValidationError{Name: "gridNumber", err: errors.New(`ent: missing required field "Grid.gridNumber"`)}
	}
	if v, ok := _c.mutation.GridNumber(); ok {
		if err := grid.GridNumberValidator(v); err != nil {
			return &ValidationError{Name: "gridNumber", err: fmt.Errorf(`ent: validator failed for field "Grid.gridNumber": %w`, err)}
		}
	}
	if _, ok := _c.mutation.OrderPrice(); !ok {
		return &ValidationError{Name: "orderPrice", err: errors.New(`ent: missing required field "Grid.orderPrice"`)}
	}
	if _, ok := _c.mutation.FinalPrice(); !ok {
		return &ValidationError{Name: "finalPrice", err: errors.New(`ent: missing required field "Grid.finalPrice"`)}
	}
	if _, ok := _c.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Grid.amount"`)}
	}
	if _, ok := _c.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Grid.quantity"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Grid.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := grid.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Grid.status": %w`, err)}
		}
	}
	return nil
}

func (_c *GridCreate) sqlSave(ctx context.Context) (*Grid, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GridCreate) createSpec() (*Grid, *sqlgraph.CreateSpec) {
	var (
		_node = &Grid{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(grid.Table, sqlgraph.NewFieldSpec(grid.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(grid.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(grid.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.GUID(); ok {
		_spec.SetField(grid.FieldGUID, field.TypeString, value)
		_node.GUID = value
	}
	if value, ok := _c.mutation.Account(); ok {
		_spec.SetField(grid.FieldAccount, field.TypeString, value)
		_node.Account = value
	}
	if value, ok := _c.mutation.Token(); ok {
		_spec.SetField(grid.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := _c.mutation.Symbol(); ok {
		_spec.SetField(grid.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := _c.mutation.StrategyId(); ok {
		_spec.SetField(grid.FieldStrategyId, field.TypeString, value)
		_node.StrategyId = value
	}
	if value, ok := _c.mutation.GridNumber(); ok {
		_spec.SetField(grid.FieldGridNumber, field.TypeInt, value)
		_node.GridNumber = value
	}
	if value, ok := _c.mutation.OrderPrice(); ok {
		_spec.SetField(grid.FieldOrderPrice, field.TypeString, value)
		_node.OrderPrice = value
	}
	if value, ok := _c.mutation.FinalPrice(); ok {
		_spec.SetField(grid.FieldFinalPrice, field.TypeString, value)
		_node.FinalPrice = value
	}
	if value, ok := _c.mutation.Amount(); ok {
		_spec.SetField(grid.FieldAmount, field.TypeString, value)
		_node.Amount = value
	}
	if value, ok := _c.mutation.Quantity(); ok {
		_spec.SetField(grid.FieldQuantity, field.TypeString, value)
		_node.Quantity = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(grid.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// GridCreateBulk is the builder for creating many Grid entities in bulk.
type GridCreateBulk struct {
	config
	err      error
	builders []*GridCreate
}

// Save creates the Grid entities in the database.
func (_c *GridCreateBulk) Save(ctx context.Context) ([]*Grid, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Grid, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GridMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GridCreateBulk) SaveX(ctx context.Context) []*Grid {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GridCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GridCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
