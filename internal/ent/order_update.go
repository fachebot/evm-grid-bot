// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/order"
	"github.com/fachebot/evm-grid-bot/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (_u *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *OrderUpdate) SetUpdateTime(v time.Time) *OrderUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetAccount sets the "account" field.
func (_u *OrderUpdate) SetAccount(v string) *OrderUpdate {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableAccount(v *string) *OrderUpdate {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *OrderUpdate) SetToken(v string) *OrderUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableToken(v *string) *OrderUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *OrderUpdate) SetSymbol(v string) *OrderUpdate {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableSymbol(v *string) *OrderUpdate {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetGridId sets the "gridId" field.
func (_u *OrderUpdate) SetGridId(v string) *OrderUpdate {
	_u.mutation.SetGridId(v)
	return _u
}

// SetNillableGridId sets the "gridId" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableGridId(v *string) *OrderUpdate {
	if v != nil {
		_u.SetGridId(*v)
	}
	return _u
}

// ClearGridId clears the value of the "gridId" field.
func (_u *OrderUpdate) ClearGridId() *OrderUpdate {
	_u.mutation.ClearGridId()
	return _u
}

// SetGridNumber sets the "gridNumber" field.
func (_u *OrderUpdate) SetGridNumber(v int) *OrderUpdate {
	_u.mutation.ResetGridNumber()
	_u.mutation.SetGridNumber(v)
	return _u
}

// SetNillableGridNumber sets the "gridNumber" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableGridNumber(v *int) *OrderUpdate {
	if v != nil {
		_u.SetGridNumber(*v)
	}
	return _u
}

// AddGridNumber adds value to the "gridNumber" field.
func (_u *OrderUpdate) AddGridNumber(v int) *OrderUpdate {
	_u.mutation.AddGridNumber(v)
	return _u
}

// ClearGridNumber clears the value of the "gridNumber" field.
func (_u *OrderUpdate) ClearGridNumber() *OrderUpdate {
	_u.mutation.ClearGridNumber()
	return _u
}

// SetGridBuyCost sets the "gridBuyCost" field.
func (_u *OrderUpdate) SetGridBuyCost(v decimal.Decimal) *OrderUpdate {
	_u.mutation.SetGridBuyCost(v)
	return _u
}

// SetNillableGridBuyCost sets the "gridBuyCost" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableGridBuyCost(v *decimal.Decimal) *OrderUpdate {
	if v != nil {
		_u.SetGridBuyCost(*v)
	}
	return _u
}

// ClearGridBuyCost clears the value of the "gridBuyCost" field.
func (_u *OrderUpdate) ClearGridBuyCost() *OrderUpdate {
	_u.mutation.ClearGridBuyCost()
	return _u
}

// SetStrategyId sets the "strategyId" field.
func (_u *OrderUpdate) SetStrategyId(v string) *OrderUpdate {
	_u.mutation.SetStrategyId(v)
	return _u
}

// SetNillableStrategyId sets the "strategyId" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableStrategyId(v *string) *OrderUpdate {
	if v != nil {
		_u.SetStrategyId(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *OrderUpdate) SetType(v order.Type) *OrderUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableType(v *order.Type) *OrderUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetPrice sets the "price" field.
func (_u *OrderUpdate) SetPrice(v decimal.Decimal) *OrderUpdate {
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *OrderUpdate) SetNillablePrice(v *decimal.Decimal) *OrderUpdate {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// SetFinalPrice sets the "finalPrice" field.
func (_u *OrderUpdate) SetFinalPrice(v decimal.Decimal) *OrderUpdate {
	_u.mutation.SetFinalPrice(v)
	return _u
}

// SetNillableFinalPrice sets the "finalPrice" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableFinalPrice(v *decimal.Decimal) *OrderUpdate {
	if v != nil {
		_u.SetFinalPrice(*v)
	}
	return _u
}

// SetInAmount sets the "inAmount" field.
func (_u *OrderUpdate) SetInAmount(v decimal.Decimal) *OrderUpdate {
	_u.mutation.SetInAmount(v)
	return _u
}

// SetNillableInAmount sets the "inAmount" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableInAmount(v *decimal.Decimal) *OrderUpdate {
	if v != nil {
		_u.SetInAmount(*v)
	}
	return _u
}

// SetOutAmount sets the "outAmount" field.
func (_u *OrderUpdate) SetOutAmount(v decimal.Decimal) *OrderUpdate {
	_u.mutation.SetOutAmount(v)
	return _u
}

// SetNillableOutAmount sets the "outAmount" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableOutAmount(v *decimal.Decimal) *OrderUpdate {
	if v != nil {
		_u.SetOutAmount(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *OrderUpdate) SetStatus(v order.Status) *OrderUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableStatus(v *order.Status) *OrderUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNonce sets the "nonce" field.
func (_u *OrderUpdate) SetNonce(v uint64) *OrderUpdate {
	_u.mutation.ResetNonce()
	_u.mutation.SetNonce(v)
	return _u
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableNonce(v *uint64) *OrderUpdate {
	if v != nil {
		_u.SetNonce(*v)
	}
	return _u
}

// AddNonce adds value to the "nonce" field.
func (_u *OrderUpdate) AddNonce(v int64) *OrderUpdate {
	_u.mutation.AddNonce(v)
	return _u
}

// SetTxHash sets the "txHash" field.
func (_u *OrderUpdate) SetTxHash(v string) *OrderUpdate {
	_u.mutation.SetTxHash(v)
	return _u
}

// SetNillableTxHash sets the "txHash" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableTxHash(v *string) *OrderUpdate {
	if v != nil {
		_u.SetTxHash(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *OrderUpdate) SetReason(v string) *OrderUpdate {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableReason(v *string) *OrderUpdate {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// SetProfit sets the "profit" field.
func (_u *OrderUpdate) SetProfit(v decimal.Decimal) *OrderUpdate {
	_u.mutation.SetProfit(v)
	return _u
}

// SetNillableProfit sets the "profit" field if the given value is not nil.
func (_u *OrderUpdate) SetNillableProfit(v *decimal.Decimal) *OrderUpdate {
	if v != nil {
		_u.SetProfit(*v)
	}
	return _u
}

// ClearProfit clears the value of the "profit" field.
func (_u *OrderUpdate) ClearProfit() *OrderUpdate {
	_u.mutation.ClearProfit()
	return _u
}

// Mutation returns the OrderMutation object of the builder.
func (_u *OrderUpdate) Mutation() *OrderMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrderUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := order.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrderUpdate) check() error {
	if v, ok := _u.mutation.Account(); ok {
		if err := order.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Order.account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := order.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Order.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := order.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Order.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GridId(); ok {
		if err := order.GridIdValidator(v); err != nil {
			return &ValidationError{Name: "gridId", err: fmt.Errorf(`ent: validator failed for field "Order.gridId": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StrategyId(); ok {
		if err := order.StrategyIdValidator(v); err != nil {
			return &ValidationError{Name: "strategyId", err: fmt.Errorf(`ent: validator failed for field "Order.strategyId": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := order.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Order.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TxHash(); ok {
		if err := order.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "txHash", err: fmt.Errorf(`ent: validator failed for field "Order.txHash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Reason(); ok {
		if err := order.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "Order.reason": %w`, err)}
		}
	}
	return nil
}

func (_u *OrderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(order.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(order.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(order.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.GridId(); ok {
		_spec.SetField(order.FieldGridId, field.TypeString, value)
	}
	if _u.mutation.GridIdCleared() {
		_spec.ClearField(order.FieldGridId, field.TypeString)
	}
	if value, ok := _u.mutation.GridNumber(); ok {
		_spec.SetField(order.FieldGridNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGridNumber(); ok {
		_spec.AddField(order.FieldGridNumber, field.TypeInt, value)
	}
	if _u.mutation.GridNumberCleared() {
		_spec.ClearField(order.FieldGridNumber, field.TypeInt)
	}
	if value, ok := _u.mutation.GridBuyCost(); ok {
		_spec.SetField(order.FieldGridBuyCost, field.TypeString, value)
	}
	if _u.mutation.GridBuyCostCleared() {
		_spec.ClearField(order.FieldGridBuyCost, field.TypeString)
	}
	if value, ok := _u.mutation.StrategyId(); ok {
		_spec.SetField(order.FieldStrategyId, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.FinalPrice(); ok {
		_spec.SetField(order.FieldFinalPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.InAmount(); ok {
		_spec.SetField(order.FieldInAmount, field.TypeString, value)
	}
	if value, ok := _u.mutation.OutAmount(); ok {
		_spec.SetField(order.FieldOutAmount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Nonce(); ok {
		_spec.SetField(order.FieldNonce, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNonce(); ok {
		_spec.AddField(order.FieldNonce, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.TxHash(); ok {
		_spec.SetField(order.FieldTxHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(order.FieldReason, field.TypeString, value)
	}
	if value, ok := _u.mutation.Profit(); ok {
		_spec.SetField(order.FieldProfit, field.TypeString, value)
	}
	if _u.mutation.ProfitCleared() {
		_spec.ClearField(order.FieldProfit, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *OrderUpdateOne) SetUpdateTime(v time.Time) *OrderUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetAccount sets the "account" field.
func (_u *OrderUpdateOne) SetAccount(v string) *OrderUpdateOne {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableAccount(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *OrderUpdateOne) SetToken(v string) *OrderUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableToken(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *OrderUpdateOne) SetSymbol(v string) *OrderUpdateOne {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableSymbol(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetGridId sets the "gridId" field.
func (_u *OrderUpdateOne) SetGridId(v string) *OrderUpdateOne {
	_u.mutation.SetGridId(v)
	return _u
}

// SetNillableGridId sets the "gridId" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableGridId(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetGridId(*v)
	}
	return _u
}

// ClearGridId clears the value of the "gridId" field.
func (_u *OrderUpdateOne) ClearGridId() *OrderUpdateOne {
	_u.mutation.ClearGridId()
	return _u
}

// SetGridNumber sets the "gridNumber" field.
func (_u *OrderUpdateOne) SetGridNumber(v int) *OrderUpdateOne {
	_u.mutation.ResetGridNumber()
	_u.mutation.SetGridNumber(v)
	return _u
}

// SetNillableGridNumber sets the "gridNumber" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableGridNumber(v *int) *OrderUpdateOne {
	if v != nil {
		_u.SetGridNumber(*v)
	}
	return _u
}

// AddGridNumber adds value to the "gridNumber" field.
func (_u *OrderUpdateOne) AddGridNumber(v int) *OrderUpdateOne {
	_u.mutation.AddGridNumber(v)
	return _u
}

// ClearGridNumber clears the value of the "gridNumber" field.
func (_u *OrderUpdateOne) ClearGridNumber() *OrderUpdateOne {
	_u.mutation.ClearGridNumber()
	return _u
}

// SetGridBuyCost sets the "gridBuyCost" field.
func (_u *OrderUpdateOne) SetGridBuyCost(v decimal.Decimal) *OrderUpdateOne {
	_u.mutation.SetGridBuyCost(v)
	return _u
}

// SetNillableGridBuyCost sets the "gridBuyCost" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableGridBuyCost(v *decimal.Decimal) *OrderUpdateOne {
	if v != nil {
		_u.SetGridBuyCost(*v)
	}
	return _u
}

// ClearGridBuyCost clears the value of the "gridBuyCost" field.
func (_u *OrderUpdateOne) ClearGridBuyCost() *OrderUpdateOne {
	_u.mutation.ClearGridBuyCost()
	return _u
}

// SetStrategyId sets the "strategyId" field.
func (_u *OrderUpdateOne) SetStrategyId(v string) *OrderUpdateOne {
	_u.mutation.SetStrategyId(v)
	return _u
}

// SetNillableStrategyId sets the "strategyId" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableStrategyId(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetStrategyId(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *OrderUpdateOne) SetType(v order.Type) *OrderUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableType(v *order.Type) *OrderUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetPrice sets the "price" field.
func (_u *OrderUpdateOne) SetPrice(v decimal.Decimal) *OrderUpdateOne {
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillablePrice(v *decimal.Decimal) *OrderUpdateOne {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// SetFinalPrice sets the "finalPrice" field.
func (_u *OrderUpdateOne) SetFinalPrice(v decimal.Decimal) *OrderUpdateOne {
	_u.mutation.SetFinalPrice(v)
	return _u
}

// SetNillableFinalPrice sets the "finalPrice" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableFinalPrice(v *decimal.Decimal) *OrderUpdateOne {
	if v != nil {
		_u.SetFinalPrice(*v)
	}
	return _u
}

// SetInAmount sets the "inAmount" field.
func (_u *OrderUpdateOne) SetInAmount(v decimal.Decimal) *OrderUpdateOne {
	_u.mutation.SetInAmount(v)
	return _u
}

// SetNillableInAmount sets the "inAmount" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableInAmount(v *decimal.Decimal) *OrderUpdateOne {
	if v != nil {
		_u.SetInAmount(*v)
	}
	return _u
}

// SetOutAmount sets the "outAmount" field.
func (_u *OrderUpdateOne) SetOutAmount(v decimal.Decimal) *OrderUpdateOne {
	_u.mutation.SetOutAmount(v)
	return _u
}

// SetNillableOutAmount sets the "outAmount" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableOutAmount(v *decimal.Decimal) *OrderUpdateOne {
	if v != nil {
		_u.SetOutAmount(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *OrderUpdateOne) SetStatus(v order.Status) *OrderUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableStatus(v *order.Status) *OrderUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetNonce sets the "nonce" field.
func (_u *OrderUpdateOne) SetNonce(v uint64) *OrderUpdateOne {
	_u.mutation.ResetNonce()
	_u.mutation.SetNonce(v)
	return _u
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableNonce(v *uint64) *OrderUpdateOne {
	if v != nil {
		_u.SetNonce(*v)
	}
	return _u
}

// AddNonce adds value to the "nonce" field.
func (_u *OrderUpdateOne) AddNonce(v int64) *OrderUpdateOne {
	_u.mutation.AddNonce(v)
	return _u
}

// SetTxHash sets the "txHash" field.
func (_u *OrderUpdateOne) SetTxHash(v string) *OrderUpdateOne {
	_u.mutation.SetTxHash(v)
	return _u
}

// SetNillableTxHash sets the "txHash" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableTxHash(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetTxHash(*v)
	}
	return _u
}

// SetReason sets the "reason" field.
func (_u *OrderUpdateOne) SetReason(v string) *OrderUpdateOne {
	_u.mutation.SetReason(v)
	return _u
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableReason(v *string) *OrderUpdateOne {
	if v != nil {
		_u.SetReason(*v)
	}
	return _u
}

// SetProfit sets the "profit" field.
func (_u *OrderUpdateOne) SetProfit(v decimal.Decimal) *OrderUpdateOne {
	_u.mutation.SetProfit(v)
	return _u
}

// SetNillableProfit sets the "profit" field if the given value is not nil.
func (_u *OrderUpdateOne) SetNillableProfit(v *decimal.Decimal) *OrderUpdateOne {
	if v != nil {
		_u.SetProfit(*v)
	}
	return _u
}

// ClearProfit clears the value of the "profit" field.
func (_u *OrderUpdateOne) ClearProfit() *OrderUpdateOne {
	_u.mutation.ClearProfit()
	return _u
}

// Mutation returns the OrderMutation object of the builder.
func (_u *OrderUpdateOne) Mutation() *OrderMutation {
	return _u.mutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (_u *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Order entity.
func (_u *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrderUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := order.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrderUpdateOne) check() error {
	if v, ok := _u.mutation.Account(); ok {
		if err := order.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Order.account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := order.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Order.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := order.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Order.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GridId(); ok {
		if err := order.GridIdValidator(v); err != nil {
			return &ValidationError{Name: "gridId", err: fmt.Errorf(`ent: validator failed for field "Order.gridId": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StrategyId(); ok {
		if err := order.StrategyIdValidator(v); err != nil {
			return &ValidationError{Name: "strategyId", err: fmt.Errorf(`ent: validator failed for field "Order.strategyId": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := order.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Order.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TxHash(); ok {
		if err := order.TxHashValidator(v); err != nil {
			return &ValidationError{Name: "txHash", err: fmt.Errorf(`ent: validator failed for field "Order.txHash": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Reason(); ok {
		if err := order.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "Order.reason": %w`, err)}
		}
	}
	return nil
}

func (_u *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(order.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(order.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(order.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.GridId(); ok {
		_spec.SetField(order.FieldGridId, field.TypeString, value)
	}
	if _u.mutation.GridIdCleared() {
		_spec.ClearField(order.FieldGridId, field.TypeString)
	}
	if value, ok := _u.mutation.GridNumber(); ok {
		_spec.SetField(order.FieldGridNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGridNumber(); ok {
		_spec.AddField(order.FieldGridNumber, field.TypeInt, value)
	}
	if _u.mutation.GridNumberCleared() {
		_spec.ClearField(order.FieldGridNumber, field.TypeInt)
	}
	if value, ok := _u.mutation.GridBuyCost(); ok {
		_spec.SetField(order.FieldGridBuyCost, field.TypeString, value)
	}
	if _u.mutation.GridBuyCostCleared() {
		_spec.ClearField(order.FieldGridBuyCost, field.TypeString)
	}
	if value, ok := _u.mutation.StrategyId(); ok {
		_spec.SetField(order.FieldStrategyId, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(order.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.FinalPrice(); ok {
		_spec.SetField(order.FieldFinalPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.InAmount(); ok {
		_spec.SetField(order.FieldInAmount, field.TypeString, value)
	}
	if value, ok := _u.mutation.OutAmount(); ok {
		_spec.SetField(order.FieldOutAmount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Nonce(); ok {
		_spec.SetField(order.FieldNonce, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedNonce(); ok {
		_spec.AddField(order.FieldNonce, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.TxHash(); ok {
		_spec.SetField(order.FieldTxHash, field.TypeString, value)
	}
	if value, ok := _u.mutation.Reason(); ok {
		_spec.SetField(order.FieldReason, field.TypeString, value)
	}
	if value, ok := _u.mutation.Profit(); ok {
		_spec.SetField(order.FieldProfit, field.TypeString, value)
	}
	if _u.mutation.ProfitCleared() {
		_spec.ClearField(order.FieldProfit, field.TypeString)
	}
	_node = &Order{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
