// Code generated by ent, DO NOT EDIT.

package settings

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the settings type in the database.
	Label = "settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldSlippageBps holds the string denoting the slippagebps field in the database.
	FieldSlippageBps = "slippage_bps"
	// FieldSellSlippageBps holds the string denoting the sellslippagebps field in the database.
	FieldSellSlippageBps = "sell_slippage_bps"
	// FieldExitSlippageBps holds the string denoting the exitslippagebps field in the database.
	FieldExitSlippageBps = "exit_slippage_bps"
	// FieldDexAggregator holds the string denoting the dexaggregator field in the database.
	FieldDexAggregator = "dex_aggregator"
	// FieldEnableInfiniteApproval holds the string denoting the enableinfiniteapproval field in the database.
	FieldEnableInfiniteApproval = "enable_infinite_approval"
	// Table holds the table name of the settings in the database.
	Table = "settings"
)

// Columns holds all SQL columns for settings fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUserId,
	FieldSlippageBps,
	FieldSellSlippageBps,
	FieldExitSlippageBps,
	FieldDexAggregator,
	FieldEnableInfiniteApproval,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// SlippageBpsValidator is a validator for the "slippageBps" field. It is called by the builders before save.
	SlippageBpsValidator func(int) error
	// SellSlippageBpsValidator is a validator for the "sellSlippageBps" field. It is called by the builders before save.
	SellSlippageBpsValidator func(int) error
	// ExitSlippageBpsValidator is a validator for the "exitSlippageBps" field. It is called by the builders before save.
	ExitSlippageBpsValidator func(int) error
)

// DexAggregator defines the type for the "dexAggregator" enum field.
type DexAggregator string

// DexAggregator values.
const (
	DexAggregatorRelay DexAggregator = "relay"
)

func (da DexAggregator) String() string {
	return string(da)
}

// DexAggregatorValidator is a validator for the "dexAggregator" field enum values. It is called by the builders before save.
func DexAggregatorValidator(da DexAggregator) error {
	switch da {
	case DexAggregatorRelay:
		return nil
	default:
		return fmt.Errorf("settings: invalid enum value for dexAggregator field: %q", da)
	}
}

// OrderOption defines the ordering options for the Settings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// BySlippageBps orders the results by the slippageBps field.
func BySlippageBps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlippageBps, opts...).ToFunc()
}

// BySellSlippageBps orders the results by the sellSlippageBps field.
func BySellSlippageBps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSellSlippageBps, opts...).ToFunc()
}

// ByExitSlippageBps orders the results by the exitSlippageBps field.
func ByExitSlippageBps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExitSlippageBps, opts...).ToFunc()
}

// ByDexAggregator orders the results by the dexAggregator field.
func ByDexAggregator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDexAggregator, opts...).ToFunc()
}

// ByEnableInfiniteApproval orders the results by the enableInfiniteApproval field.
func ByEnableInfiniteApproval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableInfiniteApproval, opts...).ToFunc()
}
