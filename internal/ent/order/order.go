// Code generated by ent, DO NOT EDIT.

package order

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldAccount holds the string denoting the account field in the database.
	FieldAccount = "account"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldGridId holds the string denoting the gridid field in the database.
	FieldGridId = "grid_id"
	// FieldGridNumber holds the string denoting the gridnumber field in the database.
	FieldGridNumber = "grid_number"
	// FieldGridBuyCost holds the string denoting the gridbuycost field in the database.
	FieldGridBuyCost = "grid_buy_cost"
	// FieldStrategyId holds the string denoting the strategyid field in the database.
	FieldStrategyId = "strategy_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldFinalPrice holds the string denoting the finalprice field in the database.
	FieldFinalPrice = "final_price"
	// FieldInAmount holds the string denoting the inamount field in the database.
	FieldInAmount = "in_amount"
	// FieldOutAmount holds the string denoting the outamount field in the database.
	FieldOutAmount = "out_amount"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldTxHash holds the string denoting the txhash field in the database.
	FieldTxHash = "tx_hash"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldProfit holds the string denoting the profit field in the database.
	FieldProfit = "profit"
	// Table holds the table name of the order in the database.
	Table = "orders"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldAccount,
	FieldToken,
	FieldSymbol,
	FieldGridId,
	FieldGridNumber,
	FieldGridBuyCost,
	FieldStrategyId,
	FieldType,
	FieldPrice,
	FieldFinalPrice,
	FieldInAmount,
	FieldOutAmount,
	FieldStatus,
	FieldNonce,
	FieldTxHash,
	FieldReason,
	FieldProfit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// AccountValidator is a validator for the "account" field. It is called by the builders before save.
	AccountValidator func(string) error
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// GridIdValidator is a validator for the "gridId" field. It is called by the builders before save.
	GridIdValidator func(string) error
	// StrategyIdValidator is a validator for the "strategyId" field. It is called by the builders before save.
	StrategyIdValidator func(string) error
	// TxHashValidator is a validator for the "txHash" field. It is called by the builders before save.
	TxHashValidator func(string) error
	// ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	ReasonValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeBuy  Type = "buy"
	TypeSell Type = "sell"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeBuy, TypeSell:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending  Status = "pending"
	StatusClosed   Status = "closed"
	StatusRejected Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusClosed, StatusRejected:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByAccount orders the results by the account field.
func ByAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccount, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByGridId orders the results by the gridId field.
func ByGridId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGridId, opts...).ToFunc()
}

// ByGridNumber orders the results by the gridNumber field.
func ByGridNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGridNumber, opts...).ToFunc()
}

// ByGridBuyCost orders the results by the gridBuyCost field.
func ByGridBuyCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGridBuyCost, opts...).ToFunc()
}

// ByStrategyId orders the results by the strategyId field.
func ByStrategyId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrategyId, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByFinalPrice orders the results by the finalPrice field.
func ByFinalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalPrice, opts...).ToFunc()
}

// ByInAmount orders the results by the inAmount field.
func ByInAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInAmount, opts...).ToFunc()
}

// ByOutAmount orders the results by the outAmount field.
func ByOutAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutAmount, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByTxHash orders the results by the txHash field.
func ByTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxHash, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByProfit orders the results by the profit field.
func ByProfit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfit, opts...).ToFunc()
}
