// Code generated by ent, DO NOT EDIT.

package strategy

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the strategy type in the database.
	Label = "strategy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldGUID holds the string denoting the guid field in the database.
	FieldGUID = "guid"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldMartinFactor holds the string denoting the martinfactor field in the database.
	FieldMartinFactor = "martin_factor"
	// FieldMaxGridLimit holds the string denoting the maxgridlimit field in the database.
	FieldMaxGridLimit = "max_grid_limit"
	// FieldTakeProfitRatio holds the string denoting the takeprofitratio field in the database.
	FieldTakeProfitRatio = "take_profit_ratio"
	// FieldUpperPriceBound holds the string denoting the upperpricebound field in the database.
	FieldUpperPriceBound = "upper_price_bound"
	// FieldLowerPriceBound holds the string denoting the lowerpricebound field in the database.
	FieldLowerPriceBound = "lower_price_bound"
	// FieldInitialOrderSize holds the string denoting the initialordersize field in the database.
	FieldInitialOrderSize = "initial_order_size"
	// FieldLastKlineVolume holds the string denoting the lastklinevolume field in the database.
	FieldLastKlineVolume = "last_kline_volume"
	// FieldFiveKlineVolume holds the string denoting the fiveklinevolume field in the database.
	FieldFiveKlineVolume = "five_kline_volume"
	// FieldFirstOrderId holds the string denoting the firstorderid field in the database.
	FieldFirstOrderId = "first_order_id"
	// FieldUpperBoundExit holds the string denoting the upperboundexit field in the database.
	FieldUpperBoundExit = "upper_bound_exit"
	// FieldStopLossExit holds the string denoting the stoplossexit field in the database.
	FieldStopLossExit = "stop_loss_exit"
	// FieldTakeProfitExit holds the string denoting the takeprofitexit field in the database.
	FieldTakeProfitExit = "take_profit_exit"
	// FieldGlobalTakeProfitRatio holds the string denoting the globaltakeprofitratio field in the database.
	FieldGlobalTakeProfitRatio = "global_take_profit_ratio"
	// FieldDynamicStopLoss holds the string denoting the dynamicstoploss field in the database.
	FieldDynamicStopLoss = "dynamic_stop_loss"
	// FieldDropOn holds the string denoting the dropon field in the database.
	FieldDropOn = "drop_on"
	// FieldCandlesToCheck holds the string denoting the candlestocheck field in the database.
	FieldCandlesToCheck = "candles_to_check"
	// FieldDropThreshold holds the string denoting the dropthreshold field in the database.
	FieldDropThreshold = "drop_threshold"
	// FieldEnableAutoBuy holds the string denoting the enableautobuy field in the database.
	FieldEnableAutoBuy = "enable_auto_buy"
	// FieldEnableAutoSell holds the string denoting the enableautosell field in the database.
	FieldEnableAutoSell = "enable_auto_sell"
	// FieldEnableAutoExit holds the string denoting the enableautoexit field in the database.
	FieldEnableAutoExit = "enable_auto_exit"
	// FieldEnablePushNotification holds the string denoting the enablepushnotification field in the database.
	FieldEnablePushNotification = "enable_push_notification"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldGridTrend holds the string denoting the gridtrend field in the database.
	FieldGridTrend = "grid_trend"
	// FieldLastLowerThresholdAlertTime holds the string denoting the lastlowerthresholdalerttime field in the database.
	FieldLastLowerThresholdAlertTime = "last_lower_threshold_alert_time"
	// FieldLastUpperThresholdAlertTime holds the string denoting the lastupperthresholdalerttime field in the database.
	FieldLastUpperThresholdAlertTime = "last_upper_threshold_alert_time"
	// Table holds the table name of the strategy in the database.
	Table = "strategies"
)

// Columns holds all SQL columns for strategy fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldGUID,
	FieldUserId,
	FieldToken,
	FieldSymbol,
	FieldMartinFactor,
	FieldMaxGridLimit,
	FieldTakeProfitRatio,
	FieldUpperPriceBound,
	FieldLowerPriceBound,
	FieldInitialOrderSize,
	FieldLastKlineVolume,
	FieldFiveKlineVolume,
	FieldFirstOrderId,
	FieldUpperBoundExit,
	FieldStopLossExit,
	FieldTakeProfitExit,
	FieldGlobalTakeProfitRatio,
	FieldDynamicStopLoss,
	FieldDropOn,
	FieldCandlesToCheck,
	FieldDropThreshold,
	FieldEnableAutoBuy,
	FieldEnableAutoSell,
	FieldEnableAutoExit,
	FieldEnablePushNotification,
	FieldStatus,
	FieldGridTrend,
	FieldLastLowerThresholdAlertTime,
	FieldLastUpperThresholdAlertTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// GUIDValidator is a validator for the "guid" field. It is called by the builders before save.
	GUIDValidator func(string) error
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// MartinFactorValidator is a validator for the "martinFactor" field. It is called by the builders before save.
	MartinFactorValidator func(float64) error
	// MaxGridLimitValidator is a validator for the "maxGridLimit" field. It is called by the builders before save.
	MaxGridLimitValidator func(int) error
	// DefaultCandlesToCheck holds the default value on creation for the "candlesToCheck" field.
	DefaultCandlesToCheck int
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusInactive:
		return nil
	default:
		return fmt.Errorf("strategy: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Strategy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByGUID orders the results by the guid field.
func ByGUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGUID, opts...).ToFunc()
}

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByMartinFactor orders the results by the martinFactor field.
func ByMartinFactor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMartinFactor, opts...).ToFunc()
}

// ByMaxGridLimit orders the results by the maxGridLimit field.
func ByMaxGridLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxGridLimit, opts...).ToFunc()
}

// ByTakeProfitRatio orders the results by the takeProfitRatio field.
func ByTakeProfitRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTakeProfitRatio, opts...).ToFunc()
}

// ByUpperPriceBound orders the results by the upperPriceBound field.
func ByUpperPriceBound(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpperPriceBound, opts...).ToFunc()
}

// ByLowerPriceBound orders the results by the lowerPriceBound field.
func ByLowerPriceBound(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLowerPriceBound, opts...).ToFunc()
}

// ByInitialOrderSize orders the results by the initialOrderSize field.
func ByInitialOrderSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitialOrderSize, opts...).ToFunc()
}

// ByLastKlineVolume orders the results by the lastKlineVolume field.
func ByLastKlineVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastKlineVolume, opts...).ToFunc()
}

// ByFiveKlineVolume orders the results by the fiveKlineVolume field.
func ByFiveKlineVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFiveKlineVolume, opts...).ToFunc()
}

// ByFirstOrderId orders the results by the firstOrderId field.
func ByFirstOrderId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstOrderId, opts...).ToFunc()
}

// ByUpperBoundExit orders the results by the upperBoundExit field.
func ByUpperBoundExit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpperBoundExit, opts...).ToFunc()
}

// ByStopLossExit orders the results by the stopLossExit field.
func ByStopLossExit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStopLossExit, opts...).ToFunc()
}

// ByTakeProfitExit orders the results by the takeProfitExit field.
func ByTakeProfitExit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTakeProfitExit, opts...).ToFunc()
}

// ByGlobalTakeProfitRatio orders the results by the globalTakeProfitRatio field.
func ByGlobalTakeProfitRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGlobalTakeProfitRatio, opts...).ToFunc()
}

// ByDynamicStopLoss orders the results by the dynamicStopLoss field.
func ByDynamicStopLoss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDynamicStopLoss, opts...).ToFunc()
}

// ByDropOn orders the results by the dropOn field.
func ByDropOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDropOn, opts...).ToFunc()
}

// ByCandlesToCheck orders the results by the candlesToCheck field.
func ByCandlesToCheck(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCandlesToCheck, opts...).ToFunc()
}

// ByDropThreshold orders the results by the dropThreshold field.
func ByDropThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDropThreshold, opts...).ToFunc()
}

// ByEnableAutoBuy orders the results by the enableAutoBuy field.
func ByEnableAutoBuy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableAutoBuy, opts...).ToFunc()
}

// ByEnableAutoSell orders the results by the enableAutoSell field.
func ByEnableAutoSell(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableAutoSell, opts...).ToFunc()
}

// ByEnableAutoExit orders the results by the enableAutoExit field.
func ByEnableAutoExit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableAutoExit, opts...).ToFunc()
}

// ByEnablePushNotification orders the results by the enablePushNotification field.
func ByEnablePushNotification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnablePushNotification, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByGridTrend orders the results by the gridTrend field.
func ByGridTrend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGridTrend, opts...).ToFunc()
}

// ByLastLowerThresholdAlertTime orders the results by the lastLowerThresholdAlertTime field.
func ByLastLowerThresholdAlertTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLowerThresholdAlertTime, opts...).ToFunc()
}

// ByLastUpperThresholdAlertTime orders the results by the lastUpperThresholdAlertTime field.
func ByLastUpperThresholdAlertTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpperThresholdAlertTime, opts...).ToFunc()
}
