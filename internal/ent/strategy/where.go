// Code generated by ent, DO NOT EDIT.

package strategy

import (
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpdateTime, v))
}

// GUID applies equality check predicate on the "guid" field. It's identical to GUIDEQ.
func GUID(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldGUID, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUserId, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldToken, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldSymbol, v))
}

// MartinFactor applies equality check predicate on the "martinFactor" field. It's identical to MartinFactorEQ.
func MartinFactor(v float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldMartinFactor, v))
}

// MaxGridLimit applies equality check predicate on the "maxGridLimit" field. It's identical to MaxGridLimitEQ.
func MaxGridLimit(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldMaxGridLimit, v))
}

// TakeProfitRatio applies equality check predicate on the "takeProfitRatio" field. It's identical to TakeProfitRatioEQ.
func TakeProfitRatio(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldTakeProfitRatio, v))
}

// UpperPriceBound applies equality check predicate on the "upperPriceBound" field. It's identical to UpperPriceBoundEQ.
func UpperPriceBound(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpperPriceBound, v))
}

// LowerPriceBound applies equality check predicate on the "lowerPriceBound" field. It's identical to LowerPriceBoundEQ.
func LowerPriceBound(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLowerPriceBound, v))
}

// InitialOrderSize applies equality check predicate on the "initialOrderSize" field. It's identical to InitialOrderSizeEQ.
func InitialOrderSize(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldInitialOrderSize, v))
}

// LastKlineVolume applies equality check predicate on the "lastKlineVolume" field. It's identical to LastKlineVolumeEQ.
func LastKlineVolume(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLastKlineVolume, v))
}

// FiveKlineVolume applies equality check predicate on the "fiveKlineVolume" field. It's identical to FiveKlineVolumeEQ.
func FiveKlineVolume(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldFiveKlineVolume, v))
}

// FirstOrderId applies equality check predicate on the "firstOrderId" field. It's identical to FirstOrderIdEQ.
func FirstOrderId(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldFirstOrderId, v))
}

// UpperBoundExit applies equality check predicate on the "upperBoundExit" field. It's identical to UpperBoundExitEQ.
func UpperBoundExit(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpperBoundExit, v))
}

// StopLossExit applies equality check predicate on the "stopLossExit" field. It's identical to StopLossExitEQ.
func StopLossExit(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldStopLossExit, v))
}

// TakeProfitExit applies equality check predicate on the "takeProfitExit" field. It's identical to TakeProfitExitEQ.
func TakeProfitExit(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldTakeProfitExit, v))
}

// GlobalTakeProfitRatio applies equality check predicate on the "globalTakeProfitRatio" field. It's identical to GlobalTakeProfitRatioEQ.
func GlobalTakeProfitRatio(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldGlobalTakeProfitRatio, v))
}

// DynamicStopLoss applies equality check predicate on the "dynamicStopLoss" field. It's identical to DynamicStopLossEQ.
func DynamicStopLoss(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDynamicStopLoss, v))
}

// DropOn applies equality check predicate on the "dropOn" field. It's identical to DropOnEQ.
func DropOn(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDropOn, v))
}

// CandlesToCheck applies equality check predicate on the "candlesToCheck" field. It's identical to CandlesToCheckEQ.
func CandlesToCheck(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldCandlesToCheck, v))
}

// DropThreshold applies equality check predicate on the "dropThreshold" field. It's identical to DropThresholdEQ.
func DropThreshold(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDropThreshold, v))
}

// EnableAutoBuy applies equality check predicate on the "enableAutoBuy" field. It's identical to EnableAutoBuyEQ.
func EnableAutoBuy(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnableAutoBuy, v))
}

// EnableAutoSell applies equality check predicate on the "enableAutoSell" field. It's identical to EnableAutoSellEQ.
func EnableAutoSell(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnableAutoSell, v))
}

// EnableAutoExit applies equality check predicate on the "enableAutoExit" field. It's identical to EnableAutoExitEQ.
func EnableAutoExit(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnableAutoExit, v))
}

// EnablePushNotification applies equality check predicate on the "enablePushNotification" field. It's identical to EnablePushNotificationEQ.
func EnablePushNotification(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnablePushNotification, v))
}

// GridTrend applies equality check predicate on the "gridTrend" field. It's identical to GridTrendEQ.
func GridTrend(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldGridTrend, v))
}

// LastLowerThresholdAlertTime applies equality check predicate on the "lastLowerThresholdAlertTime" field. It's identical to LastLowerThresholdAlertTimeEQ.
func LastLowerThresholdAlertTime(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLastLowerThresholdAlertTime, v))
}

// LastUpperThresholdAlertTime applies equality check predicate on the "lastUpperThresholdAlertTime" field. It's identical to LastUpperThresholdAlertTimeEQ.
func LastUpperThresholdAlertTime(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLastUpperThresholdAlertTime, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldUpdateTime, v))
}

// GUIDEQ applies the EQ predicate on the "guid" field.
func GUIDEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldGUID, v))
}

// GUIDNEQ applies the NEQ predicate on the "guid" field.
func GUIDNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldGUID, v))
}

// GUIDIn applies the In predicate on the "guid" field.
func GUIDIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldGUID, vs...))
}

// GUIDNotIn applies the NotIn predicate on the "guid" field.
func GUIDNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldGUID, vs...))
}

// GUIDGT applies the GT predicate on the "guid" field.
func GUIDGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldGUID, v))
}

// GUIDGTE applies the GTE predicate on the "guid" field.
func GUIDGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldGUID, v))
}

// GUIDLT applies the LT predicate on the "guid" field.
func GUIDLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldGUID, v))
}

// GUIDLTE applies the LTE predicate on the "guid" field.
func GUIDLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldGUID, v))
}

// GUIDContains applies the Contains predicate on the "guid" field.
func GUIDContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldGUID, v))
}

// GUIDHasPrefix applies the HasPrefix predicate on the "guid" field.
func GUIDHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldGUID, v))
}

// GUIDHasSuffix applies the HasSuffix predicate on the "guid" field.
func GUIDHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldGUID, v))
}

// GUIDEqualFold applies the EqualFold predicate on the "guid" field.
func GUIDEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldGUID, v))
}

// GUIDContainsFold applies the ContainsFold predicate on the "guid" field.
func GUIDContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldGUID, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int64) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldUserId, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldToken, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldSymbol, v))
}

// MartinFactorEQ applies the EQ predicate on the "martinFactor" field.
func MartinFactorEQ(v float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldMartinFactor, v))
}

// MartinFactorNEQ applies the NEQ predicate on the "martinFactor" field.
func MartinFactorNEQ(v float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldMartinFactor, v))
}

// MartinFactorIn applies the In predicate on the "martinFactor" field.
func MartinFactorIn(vs ...float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldMartinFactor, vs...))
}

// MartinFactorNotIn applies the NotIn predicate on the "martinFactor" field.
func MartinFactorNotIn(vs ...float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldMartinFactor, vs...))
}

// MartinFactorGT applies the GT predicate on the "martinFactor" field.
func MartinFactorGT(v float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldMartinFactor, v))
}

// MartinFactorGTE applies the GTE predicate on the "martinFactor" field.
func MartinFactorGTE(v float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldMartinFactor, v))
}

// MartinFactorLT applies the LT predicate on the "martinFactor" field.
func MartinFactorLT(v float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldMartinFactor, v))
}

// MartinFactorLTE applies the LTE predicate on the "martinFactor" field.
func MartinFactorLTE(v float64) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldMartinFactor, v))
}

// MaxGridLimitEQ applies the EQ predicate on the "maxGridLimit" field.
func MaxGridLimitEQ(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldMaxGridLimit, v))
}

// MaxGridLimitNEQ applies the NEQ predicate on the "maxGridLimit" field.
func MaxGridLimitNEQ(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldMaxGridLimit, v))
}

// MaxGridLimitIn applies the In predicate on the "maxGridLimit" field.
func MaxGridLimitIn(vs ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldMaxGridLimit, vs...))
}

// MaxGridLimitNotIn applies the NotIn predicate on the "maxGridLimit" field.
func MaxGridLimitNotIn(vs ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldMaxGridLimit, vs...))
}

// MaxGridLimitGT applies the GT predicate on the "maxGridLimit" field.
func MaxGridLimitGT(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldMaxGridLimit, v))
}

// MaxGridLimitGTE applies the GTE predicate on the "maxGridLimit" field.
func MaxGridLimitGTE(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldMaxGridLimit, v))
}

// MaxGridLimitLT applies the LT predicate on the "maxGridLimit" field.
func MaxGridLimitLT(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldMaxGridLimit, v))
}

// MaxGridLimitLTE applies the LTE predicate on the "maxGridLimit" field.
func MaxGridLimitLTE(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldMaxGridLimit, v))
}

// MaxGridLimitIsNil applies the IsNil predicate on the "maxGridLimit" field.
func MaxGridLimitIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldMaxGridLimit))
}

// MaxGridLimitNotNil applies the NotNil predicate on the "maxGridLimit" field.
func MaxGridLimitNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldMaxGridLimit))
}

// TakeProfitRatioEQ applies the EQ predicate on the "takeProfitRatio" field.
func TakeProfitRatioEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldTakeProfitRatio, v))
}

// TakeProfitRatioNEQ applies the NEQ predicate on the "takeProfitRatio" field.
func TakeProfitRatioNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldTakeProfitRatio, v))
}

// TakeProfitRatioIn applies the In predicate on the "takeProfitRatio" field.
func TakeProfitRatioIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldTakeProfitRatio, vs...))
}

// TakeProfitRatioNotIn applies the NotIn predicate on the "takeProfitRatio" field.
func TakeProfitRatioNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldTakeProfitRatio, vs...))
}

// TakeProfitRatioGT applies the GT predicate on the "takeProfitRatio" field.
func TakeProfitRatioGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldTakeProfitRatio, v))
}

// TakeProfitRatioGTE applies the GTE predicate on the "takeProfitRatio" field.
func TakeProfitRatioGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldTakeProfitRatio, v))
}

// TakeProfitRatioLT applies the LT predicate on the "takeProfitRatio" field.
func TakeProfitRatioLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldTakeProfitRatio, v))
}

// TakeProfitRatioLTE applies the LTE predicate on the "takeProfitRatio" field.
func TakeProfitRatioLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldTakeProfitRatio, v))
}

// TakeProfitRatioContains applies the Contains predicate on the "takeProfitRatio" field.
func TakeProfitRatioContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldTakeProfitRatio, vc))
}

// TakeProfitRatioHasPrefix applies the HasPrefix predicate on the "takeProfitRatio" field.
func TakeProfitRatioHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldTakeProfitRatio, vc))
}

// TakeProfitRatioHasSuffix applies the HasSuffix predicate on the "takeProfitRatio" field.
func TakeProfitRatioHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldTakeProfitRatio, vc))
}

// TakeProfitRatioEqualFold applies the EqualFold predicate on the "takeProfitRatio" field.
func TakeProfitRatioEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldTakeProfitRatio, vc))
}

// TakeProfitRatioContainsFold applies the ContainsFold predicate on the "takeProfitRatio" field.
func TakeProfitRatioContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldTakeProfitRatio, vc))
}

// UpperPriceBoundEQ applies the EQ predicate on the "upperPriceBound" field.
func UpperPriceBoundEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpperPriceBound, v))
}

// UpperPriceBoundNEQ applies the NEQ predicate on the "upperPriceBound" field.
func UpperPriceBoundNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldUpperPriceBound, v))
}

// UpperPriceBoundIn applies the In predicate on the "upperPriceBound" field.
func UpperPriceBoundIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldUpperPriceBound, vs...))
}

// UpperPriceBoundNotIn applies the NotIn predicate on the "upperPriceBound" field.
func UpperPriceBoundNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldUpperPriceBound, vs...))
}

// UpperPriceBoundGT applies the GT predicate on the "upperPriceBound" field.
func UpperPriceBoundGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldUpperPriceBound, v))
}

// UpperPriceBoundGTE applies the GTE predicate on the "upperPriceBound" field.
func UpperPriceBoundGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldUpperPriceBound, v))
}

// UpperPriceBoundLT applies the LT predicate on the "upperPriceBound" field.
func UpperPriceBoundLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldUpperPriceBound, v))
}

// UpperPriceBoundLTE applies the LTE predicate on the "upperPriceBound" field.
func UpperPriceBoundLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldUpperPriceBound, v))
}

// UpperPriceBoundContains applies the Contains predicate on the "upperPriceBound" field.
func UpperPriceBoundContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldUpperPriceBound, vc))
}

// UpperPriceBoundHasPrefix applies the HasPrefix predicate on the "upperPriceBound" field.
func UpperPriceBoundHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldUpperPriceBound, vc))
}

// UpperPriceBoundHasSuffix applies the HasSuffix predicate on the "upperPriceBound" field.
func UpperPriceBoundHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldUpperPriceBound, vc))
}

// UpperPriceBoundEqualFold applies the EqualFold predicate on the "upperPriceBound" field.
func UpperPriceBoundEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldUpperPriceBound, vc))
}

// UpperPriceBoundContainsFold applies the ContainsFold predicate on the "upperPriceBound" field.
func UpperPriceBoundContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldUpperPriceBound, vc))
}

// LowerPriceBoundEQ applies the EQ predicate on the "lowerPriceBound" field.
func LowerPriceBoundEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLowerPriceBound, v))
}

// LowerPriceBoundNEQ applies the NEQ predicate on the "lowerPriceBound" field.
func LowerPriceBoundNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldLowerPriceBound, v))
}

// LowerPriceBoundIn applies the In predicate on the "lowerPriceBound" field.
func LowerPriceBoundIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldLowerPriceBound, vs...))
}

// LowerPriceBoundNotIn applies the NotIn predicate on the "lowerPriceBound" field.
func LowerPriceBoundNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldLowerPriceBound, vs...))
}

// LowerPriceBoundGT applies the GT predicate on the "lowerPriceBound" field.
func LowerPriceBoundGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldLowerPriceBound, v))
}

// LowerPriceBoundGTE applies the GTE predicate on the "lowerPriceBound" field.
func LowerPriceBoundGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldLowerPriceBound, v))
}

// LowerPriceBoundLT applies the LT predicate on the "lowerPriceBound" field.
func LowerPriceBoundLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldLowerPriceBound, v))
}

// LowerPriceBoundLTE applies the LTE predicate on the "lowerPriceBound" field.
func LowerPriceBoundLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldLowerPriceBound, v))
}

// LowerPriceBoundContains applies the Contains predicate on the "lowerPriceBound" field.
func LowerPriceBoundContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldLowerPriceBound, vc))
}

// LowerPriceBoundHasPrefix applies the HasPrefix predicate on the "lowerPriceBound" field.
func LowerPriceBoundHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldLowerPriceBound, vc))
}

// LowerPriceBoundHasSuffix applies the HasSuffix predicate on the "lowerPriceBound" field.
func LowerPriceBoundHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldLowerPriceBound, vc))
}

// LowerPriceBoundEqualFold applies the EqualFold predicate on the "lowerPriceBound" field.
func LowerPriceBoundEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldLowerPriceBound, vc))
}

// LowerPriceBoundContainsFold applies the ContainsFold predicate on the "lowerPriceBound" field.
func LowerPriceBoundContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldLowerPriceBound, vc))
}

// InitialOrderSizeEQ applies the EQ predicate on the "initialOrderSize" field.
func InitialOrderSizeEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldInitialOrderSize, v))
}

// InitialOrderSizeNEQ applies the NEQ predicate on the "initialOrderSize" field.
func InitialOrderSizeNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldInitialOrderSize, v))
}

// InitialOrderSizeIn applies the In predicate on the "initialOrderSize" field.
func InitialOrderSizeIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldInitialOrderSize, vs...))
}

// InitialOrderSizeNotIn applies the NotIn predicate on the "initialOrderSize" field.
func InitialOrderSizeNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldInitialOrderSize, vs...))
}

// InitialOrderSizeGT applies the GT predicate on the "initialOrderSize" field.
func InitialOrderSizeGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldInitialOrderSize, v))
}

// InitialOrderSizeGTE applies the GTE predicate on the "initialOrderSize" field.
func InitialOrderSizeGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldInitialOrderSize, v))
}

// InitialOrderSizeLT applies the LT predicate on the "initialOrderSize" field.
func InitialOrderSizeLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldInitialOrderSize, v))
}

// InitialOrderSizeLTE applies the LTE predicate on the "initialOrderSize" field.
func InitialOrderSizeLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldInitialOrderSize, v))
}

// InitialOrderSizeContains applies the Contains predicate on the "initialOrderSize" field.
func InitialOrderSizeContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldInitialOrderSize, vc))
}

// InitialOrderSizeHasPrefix applies the HasPrefix predicate on the "initialOrderSize" field.
func InitialOrderSizeHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldInitialOrderSize, vc))
}

// InitialOrderSizeHasSuffix applies the HasSuffix predicate on the "initialOrderSize" field.
func InitialOrderSizeHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldInitialOrderSize, vc))
}

// InitialOrderSizeEqualFold applies the EqualFold predicate on the "initialOrderSize" field.
func InitialOrderSizeEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldInitialOrderSize, vc))
}

// InitialOrderSizeContainsFold applies the ContainsFold predicate on the "initialOrderSize" field.
func InitialOrderSizeContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldInitialOrderSize, vc))
}

// LastKlineVolumeEQ applies the EQ predicate on the "lastKlineVolume" field.
func LastKlineVolumeEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLastKlineVolume, v))
}

// LastKlineVolumeNEQ applies the NEQ predicate on the "lastKlineVolume" field.
func LastKlineVolumeNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldLastKlineVolume, v))
}

// LastKlineVolumeIn applies the In predicate on the "lastKlineVolume" field.
func LastKlineVolumeIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldLastKlineVolume, vs...))
}

// LastKlineVolumeNotIn applies the NotIn predicate on the "lastKlineVolume" field.
func LastKlineVolumeNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldLastKlineVolume, vs...))
}

// LastKlineVolumeGT applies the GT predicate on the "lastKlineVolume" field.
func LastKlineVolumeGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldLastKlineVolume, v))
}

// LastKlineVolumeGTE applies the GTE predicate on the "lastKlineVolume" field.
func LastKlineVolumeGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldLastKlineVolume, v))
}

// LastKlineVolumeLT applies the LT predicate on the "lastKlineVolume" field.
func LastKlineVolumeLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldLastKlineVolume, v))
}

// LastKlineVolumeLTE applies the LTE predicate on the "lastKlineVolume" field.
func LastKlineVolumeLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldLastKlineVolume, v))
}

// LastKlineVolumeContains applies the Contains predicate on the "lastKlineVolume" field.
func LastKlineVolumeContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldLastKlineVolume, vc))
}

// LastKlineVolumeHasPrefix applies the HasPrefix predicate on the "lastKlineVolume" field.
func LastKlineVolumeHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldLastKlineVolume, vc))
}

// LastKlineVolumeHasSuffix applies the HasSuffix predicate on the "lastKlineVolume" field.
func LastKlineVolumeHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldLastKlineVolume, vc))
}

// LastKlineVolumeIsNil applies the IsNil predicate on the "lastKlineVolume" field.
func LastKlineVolumeIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldLastKlineVolume))
}

// LastKlineVolumeNotNil applies the NotNil predicate on the "lastKlineVolume" field.
func LastKlineVolumeNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldLastKlineVolume))
}

// LastKlineVolumeEqualFold applies the EqualFold predicate on the "lastKlineVolume" field.
func LastKlineVolumeEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldLastKlineVolume, vc))
}

// LastKlineVolumeContainsFold applies the ContainsFold predicate on the "lastKlineVolume" field.
func LastKlineVolumeContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldLastKlineVolume, vc))
}

// FiveKlineVolumeEQ applies the EQ predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldFiveKlineVolume, v))
}

// FiveKlineVolumeNEQ applies the NEQ predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldFiveKlineVolume, v))
}

// FiveKlineVolumeIn applies the In predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldFiveKlineVolume, vs...))
}

// FiveKlineVolumeNotIn applies the NotIn predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldFiveKlineVolume, vs...))
}

// FiveKlineVolumeGT applies the GT predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldFiveKlineVolume, v))
}

// FiveKlineVolumeGTE applies the GTE predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldFiveKlineVolume, v))
}

// FiveKlineVolumeLT applies the LT predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldFiveKlineVolume, v))
}

// FiveKlineVolumeLTE applies the LTE predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldFiveKlineVolume, v))
}

// FiveKlineVolumeContains applies the Contains predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldFiveKlineVolume, vc))
}

// FiveKlineVolumeHasPrefix applies the HasPrefix predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldFiveKlineVolume, vc))
}

// FiveKlineVolumeHasSuffix applies the HasSuffix predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldFiveKlineVolume, vc))
}

// FiveKlineVolumeIsNil applies the IsNil predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldFiveKlineVolume))
}

// FiveKlineVolumeNotNil applies the NotNil predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldFiveKlineVolume))
}

// FiveKlineVolumeEqualFold applies the EqualFold predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldFiveKlineVolume, vc))
}

// FiveKlineVolumeContainsFold applies the ContainsFold predicate on the "fiveKlineVolume" field.
func FiveKlineVolumeContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldFiveKlineVolume, vc))
}

// FirstOrderIdEQ applies the EQ predicate on the "firstOrderId" field.
func FirstOrderIdEQ(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldFirstOrderId, v))
}

// FirstOrderIdNEQ applies the NEQ predicate on the "firstOrderId" field.
func FirstOrderIdNEQ(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldFirstOrderId, v))
}

// FirstOrderIdIn applies the In predicate on the "firstOrderId" field.
func FirstOrderIdIn(vs ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldFirstOrderId, vs...))
}

// FirstOrderIdNotIn applies the NotIn predicate on the "firstOrderId" field.
func FirstOrderIdNotIn(vs ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldFirstOrderId, vs...))
}

// FirstOrderIdGT applies the GT predicate on the "firstOrderId" field.
func FirstOrderIdGT(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldFirstOrderId, v))
}

// FirstOrderIdGTE applies the GTE predicate on the "firstOrderId" field.
func FirstOrderIdGTE(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldFirstOrderId, v))
}

// FirstOrderIdLT applies the LT predicate on the "firstOrderId" field.
func FirstOrderIdLT(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldFirstOrderId, v))
}

// FirstOrderIdLTE applies the LTE predicate on the "firstOrderId" field.
func FirstOrderIdLTE(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldFirstOrderId, v))
}

// FirstOrderIdIsNil applies the IsNil predicate on the "firstOrderId" field.
func FirstOrderIdIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldFirstOrderId))
}

// FirstOrderIdNotNil applies the NotNil predicate on the "firstOrderId" field.
func FirstOrderIdNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldFirstOrderId))
}

// UpperBoundExitEQ applies the EQ predicate on the "upperBoundExit" field.
func UpperBoundExitEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldUpperBoundExit, v))
}

// UpperBoundExitNEQ applies the NEQ predicate on the "upperBoundExit" field.
func UpperBoundExitNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldUpperBoundExit, v))
}

// UpperBoundExitIn applies the In predicate on the "upperBoundExit" field.
func UpperBoundExitIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldUpperBoundExit, vs...))
}

// UpperBoundExitNotIn applies the NotIn predicate on the "upperBoundExit" field.
func UpperBoundExitNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldUpperBoundExit, vs...))
}

// UpperBoundExitGT applies the GT predicate on the "upperBoundExit" field.
func UpperBoundExitGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldUpperBoundExit, v))
}

// UpperBoundExitGTE applies the GTE predicate on the "upperBoundExit" field.
func UpperBoundExitGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldUpperBoundExit, v))
}

// UpperBoundExitLT applies the LT predicate on the "upperBoundExit" field.
func UpperBoundExitLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldUpperBoundExit, v))
}

// UpperBoundExitLTE applies the LTE predicate on the "upperBoundExit" field.
func UpperBoundExitLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldUpperBoundExit, v))
}

// UpperBoundExitContains applies the Contains predicate on the "upperBoundExit" field.
func UpperBoundExitContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldUpperBoundExit, vc))
}

// UpperBoundExitHasPrefix applies the HasPrefix predicate on the "upperBoundExit" field.
func UpperBoundExitHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldUpperBoundExit, vc))
}

// UpperBoundExitHasSuffix applies the HasSuffix predicate on the "upperBoundExit" field.
func UpperBoundExitHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldUpperBoundExit, vc))
}

// UpperBoundExitIsNil applies the IsNil predicate on the "upperBoundExit" field.
func UpperBoundExitIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldUpperBoundExit))
}

// UpperBoundExitNotNil applies the NotNil predicate on the "upperBoundExit" field.
func UpperBoundExitNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldUpperBoundExit))
}

// UpperBoundExitEqualFold applies the EqualFold predicate on the "upperBoundExit" field.
func UpperBoundExitEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldUpperBoundExit, vc))
}

// UpperBoundExitContainsFold applies the ContainsFold predicate on the "upperBoundExit" field.
func UpperBoundExitContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldUpperBoundExit, vc))
}

// StopLossExitEQ applies the EQ predicate on the "stopLossExit" field.
func StopLossExitEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldStopLossExit, v))
}

// StopLossExitNEQ applies the NEQ predicate on the "stopLossExit" field.
func StopLossExitNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldStopLossExit, v))
}

// StopLossExitIn applies the In predicate on the "stopLossExit" field.
func StopLossExitIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldStopLossExit, vs...))
}

// StopLossExitNotIn applies the NotIn predicate on the "stopLossExit" field.
func StopLossExitNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldStopLossExit, vs...))
}

// StopLossExitGT applies the GT predicate on the "stopLossExit" field.
func StopLossExitGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldStopLossExit, v))
}

// StopLossExitGTE applies the GTE predicate on the "stopLossExit" field.
func StopLossExitGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldStopLossExit, v))
}

// StopLossExitLT applies the LT predicate on the "stopLossExit" field.
func StopLossExitLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldStopLossExit, v))
}

// StopLossExitLTE applies the LTE predicate on the "stopLossExit" field.
func StopLossExitLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldStopLossExit, v))
}

// StopLossExitContains applies the Contains predicate on the "stopLossExit" field.
func StopLossExitContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldStopLossExit, vc))
}

// StopLossExitHasPrefix applies the HasPrefix predicate on the "stopLossExit" field.
func StopLossExitHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldStopLossExit, vc))
}

// StopLossExitHasSuffix applies the HasSuffix predicate on the "stopLossExit" field.
func StopLossExitHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldStopLossExit, vc))
}

// StopLossExitIsNil applies the IsNil predicate on the "stopLossExit" field.
func StopLossExitIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldStopLossExit))
}

// StopLossExitNotNil applies the NotNil predicate on the "stopLossExit" field.
func StopLossExitNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldStopLossExit))
}

// StopLossExitEqualFold applies the EqualFold predicate on the "stopLossExit" field.
func StopLossExitEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldStopLossExit, vc))
}

// StopLossExitContainsFold applies the ContainsFold predicate on the "stopLossExit" field.
func StopLossExitContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldStopLossExit, vc))
}

// TakeProfitExitEQ applies the EQ predicate on the "takeProfitExit" field.
func TakeProfitExitEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldTakeProfitExit, v))
}

// TakeProfitExitNEQ applies the NEQ predicate on the "takeProfitExit" field.
func TakeProfitExitNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldTakeProfitExit, v))
}

// TakeProfitExitIn applies the In predicate on the "takeProfitExit" field.
func TakeProfitExitIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldTakeProfitExit, vs...))
}

// TakeProfitExitNotIn applies the NotIn predicate on the "takeProfitExit" field.
func TakeProfitExitNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldTakeProfitExit, vs...))
}

// TakeProfitExitGT applies the GT predicate on the "takeProfitExit" field.
func TakeProfitExitGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldTakeProfitExit, v))
}

// TakeProfitExitGTE applies the GTE predicate on the "takeProfitExit" field.
func TakeProfitExitGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldTakeProfitExit, v))
}

// TakeProfitExitLT applies the LT predicate on the "takeProfitExit" field.
func TakeProfitExitLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldTakeProfitExit, v))
}

// TakeProfitExitLTE applies the LTE predicate on the "takeProfitExit" field.
func TakeProfitExitLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldTakeProfitExit, v))
}

// TakeProfitExitContains applies the Contains predicate on the "takeProfitExit" field.
func TakeProfitExitContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldTakeProfitExit, vc))
}

// TakeProfitExitHasPrefix applies the HasPrefix predicate on the "takeProfitExit" field.
func TakeProfitExitHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldTakeProfitExit, vc))
}

// TakeProfitExitHasSuffix applies the HasSuffix predicate on the "takeProfitExit" field.
func TakeProfitExitHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldTakeProfitExit, vc))
}

// TakeProfitExitIsNil applies the IsNil predicate on the "takeProfitExit" field.
func TakeProfitExitIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldTakeProfitExit))
}

// TakeProfitExitNotNil applies the NotNil predicate on the "takeProfitExit" field.
func TakeProfitExitNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldTakeProfitExit))
}

// TakeProfitExitEqualFold applies the EqualFold predicate on the "takeProfitExit" field.
func TakeProfitExitEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldTakeProfitExit, vc))
}

// TakeProfitExitContainsFold applies the ContainsFold predicate on the "takeProfitExit" field.
func TakeProfitExitContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldTakeProfitExit, vc))
}

// GlobalTakeProfitRatioEQ applies the EQ predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldGlobalTakeProfitRatio, v))
}

// GlobalTakeProfitRatioNEQ applies the NEQ predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldGlobalTakeProfitRatio, v))
}

// GlobalTakeProfitRatioIn applies the In predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldGlobalTakeProfitRatio, vs...))
}

// GlobalTakeProfitRatioNotIn applies the NotIn predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldGlobalTakeProfitRatio, vs...))
}

// GlobalTakeProfitRatioGT applies the GT predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldGlobalTakeProfitRatio, v))
}

// GlobalTakeProfitRatioGTE applies the GTE predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldGlobalTakeProfitRatio, v))
}

// GlobalTakeProfitRatioLT applies the LT predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldGlobalTakeProfitRatio, v))
}

// GlobalTakeProfitRatioLTE applies the LTE predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldGlobalTakeProfitRatio, v))
}

// GlobalTakeProfitRatioContains applies the Contains predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldGlobalTakeProfitRatio, vc))
}

// GlobalTakeProfitRatioHasPrefix applies the HasPrefix predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldGlobalTakeProfitRatio, vc))
}

// GlobalTakeProfitRatioHasSuffix applies the HasSuffix predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldGlobalTakeProfitRatio, vc))
}

// GlobalTakeProfitRatioIsNil applies the IsNil predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldGlobalTakeProfitRatio))
}

// GlobalTakeProfitRatioNotNil applies the NotNil predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldGlobalTakeProfitRatio))
}

// GlobalTakeProfitRatioEqualFold applies the EqualFold predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldGlobalTakeProfitRatio, vc))
}

// GlobalTakeProfitRatioContainsFold applies the ContainsFold predicate on the "globalTakeProfitRatio" field.
func GlobalTakeProfitRatioContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldGlobalTakeProfitRatio, vc))
}

// DynamicStopLossEQ applies the EQ predicate on the "dynamicStopLoss" field.
func DynamicStopLossEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDynamicStopLoss, v))
}

// DynamicStopLossNEQ applies the NEQ predicate on the "dynamicStopLoss" field.
func DynamicStopLossNEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldDynamicStopLoss, v))
}

// DynamicStopLossIsNil applies the IsNil predicate on the "dynamicStopLoss" field.
func DynamicStopLossIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldDynamicStopLoss))
}

// DynamicStopLossNotNil applies the NotNil predicate on the "dynamicStopLoss" field.
func DynamicStopLossNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldDynamicStopLoss))
}

// DropOnEQ applies the EQ predicate on the "dropOn" field.
func DropOnEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDropOn, v))
}

// DropOnNEQ applies the NEQ predicate on the "dropOn" field.
func DropOnNEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldDropOn, v))
}

// DropOnIsNil applies the IsNil predicate on the "dropOn" field.
func DropOnIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldDropOn))
}

// DropOnNotNil applies the NotNil predicate on the "dropOn" field.
func DropOnNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldDropOn))
}

// CandlesToCheckEQ applies the EQ predicate on the "candlesToCheck" field.
func CandlesToCheckEQ(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldCandlesToCheck, v))
}

// CandlesToCheckNEQ applies the NEQ predicate on the "candlesToCheck" field.
func CandlesToCheckNEQ(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldCandlesToCheck, v))
}

// CandlesToCheckIn applies the In predicate on the "candlesToCheck" field.
func CandlesToCheckIn(vs ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldCandlesToCheck, vs...))
}

// CandlesToCheckNotIn applies the NotIn predicate on the "candlesToCheck" field.
func CandlesToCheckNotIn(vs ...int) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldCandlesToCheck, vs...))
}

// CandlesToCheckGT applies the GT predicate on the "candlesToCheck" field.
func CandlesToCheckGT(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldCandlesToCheck, v))
}

// CandlesToCheckGTE applies the GTE predicate on the "candlesToCheck" field.
func CandlesToCheckGTE(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldCandlesToCheck, v))
}

// CandlesToCheckLT applies the LT predicate on the "candlesToCheck" field.
func CandlesToCheckLT(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldCandlesToCheck, v))
}

// CandlesToCheckLTE applies the LTE predicate on the "candlesToCheck" field.
func CandlesToCheckLTE(v int) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldCandlesToCheck, v))
}

// CandlesToCheckIsNil applies the IsNil predicate on the "candlesToCheck" field.
func CandlesToCheckIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldCandlesToCheck))
}

// CandlesToCheckNotNil applies the NotNil predicate on the "candlesToCheck" field.
func CandlesToCheckNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldCandlesToCheck))
}

// DropThresholdEQ applies the EQ predicate on the "dropThreshold" field.
func DropThresholdEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldDropThreshold, v))
}

// DropThresholdNEQ applies the NEQ predicate on the "dropThreshold" field.
func DropThresholdNEQ(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldDropThreshold, v))
}

// DropThresholdIn applies the In predicate on the "dropThreshold" field.
func DropThresholdIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldDropThreshold, vs...))
}

// DropThresholdNotIn applies the NotIn predicate on the "dropThreshold" field.
func DropThresholdNotIn(vs ...decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldDropThreshold, vs...))
}

// DropThresholdGT applies the GT predicate on the "dropThreshold" field.
func DropThresholdGT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldDropThreshold, v))
}

// DropThresholdGTE applies the GTE predicate on the "dropThreshold" field.
func DropThresholdGTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldDropThreshold, v))
}

// DropThresholdLT applies the LT predicate on the "dropThreshold" field.
func DropThresholdLT(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldDropThreshold, v))
}

// DropThresholdLTE applies the LTE predicate on the "dropThreshold" field.
func DropThresholdLTE(v decimal.Decimal) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldDropThreshold, v))
}

// DropThresholdContains applies the Contains predicate on the "dropThreshold" field.
func DropThresholdContains(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContains(FieldDropThreshold, vc))
}

// DropThresholdHasPrefix applies the HasPrefix predicate on the "dropThreshold" field.
func DropThresholdHasPrefix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasPrefix(FieldDropThreshold, vc))
}

// DropThresholdHasSuffix applies the HasSuffix predicate on the "dropThreshold" field.
func DropThresholdHasSuffix(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldHasSuffix(FieldDropThreshold, vc))
}

// DropThresholdIsNil applies the IsNil predicate on the "dropThreshold" field.
func DropThresholdIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldDropThreshold))
}

// DropThresholdNotNil applies the NotNil predicate on the "dropThreshold" field.
func DropThresholdNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldDropThreshold))
}

// DropThresholdEqualFold applies the EqualFold predicate on the "dropThreshold" field.
func DropThresholdEqualFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldEqualFold(FieldDropThreshold, vc))
}

// DropThresholdContainsFold applies the ContainsFold predicate on the "dropThreshold" field.
func DropThresholdContainsFold(v decimal.Decimal) predicate.Strategy {
	vc := v.String()
	return predicate.Strategy(sql.FieldContainsFold(FieldDropThreshold, vc))
}

// EnableAutoBuyEQ applies the EQ predicate on the "enableAutoBuy" field.
func EnableAutoBuyEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnableAutoBuy, v))
}

// EnableAutoBuyNEQ applies the NEQ predicate on the "enableAutoBuy" field.
func EnableAutoBuyNEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldEnableAutoBuy, v))
}

// EnableAutoSellEQ applies the EQ predicate on the "enableAutoSell" field.
func EnableAutoSellEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnableAutoSell, v))
}

// EnableAutoSellNEQ applies the NEQ predicate on the "enableAutoSell" field.
func EnableAutoSellNEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldEnableAutoSell, v))
}

// EnableAutoExitEQ applies the EQ predicate on the "enableAutoExit" field.
func EnableAutoExitEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnableAutoExit, v))
}

// EnableAutoExitNEQ applies the NEQ predicate on the "enableAutoExit" field.
func EnableAutoExitNEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldEnableAutoExit, v))
}

// EnablePushNotificationEQ applies the EQ predicate on the "enablePushNotification" field.
func EnablePushNotificationEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldEnablePushNotification, v))
}

// EnablePushNotificationNEQ applies the NEQ predicate on the "enablePushNotification" field.
func EnablePushNotificationNEQ(v bool) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldEnablePushNotification, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldStatus, vs...))
}

// GridTrendEQ applies the EQ predicate on the "gridTrend" field.
func GridTrendEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldGridTrend, v))
}

// GridTrendNEQ applies the NEQ predicate on the "gridTrend" field.
func GridTrendNEQ(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldGridTrend, v))
}

// GridTrendIn applies the In predicate on the "gridTrend" field.
func GridTrendIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldGridTrend, vs...))
}

// GridTrendNotIn applies the NotIn predicate on the "gridTrend" field.
func GridTrendNotIn(vs ...string) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldGridTrend, vs...))
}

// GridTrendGT applies the GT predicate on the "gridTrend" field.
func GridTrendGT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldGridTrend, v))
}

// GridTrendGTE applies the GTE predicate on the "gridTrend" field.
func GridTrendGTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldGridTrend, v))
}

// GridTrendLT applies the LT predicate on the "gridTrend" field.
func GridTrendLT(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldGridTrend, v))
}

// GridTrendLTE applies the LTE predicate on the "gridTrend" field.
func GridTrendLTE(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldGridTrend, v))
}

// GridTrendContains applies the Contains predicate on the "gridTrend" field.
func GridTrendContains(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContains(FieldGridTrend, v))
}

// GridTrendHasPrefix applies the HasPrefix predicate on the "gridTrend" field.
func GridTrendHasPrefix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasPrefix(FieldGridTrend, v))
}

// GridTrendHasSuffix applies the HasSuffix predicate on the "gridTrend" field.
func GridTrendHasSuffix(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldHasSuffix(FieldGridTrend, v))
}

// GridTrendIsNil applies the IsNil predicate on the "gridTrend" field.
func GridTrendIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldGridTrend))
}

// GridTrendNotNil applies the NotNil predicate on the "gridTrend" field.
func GridTrendNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldGridTrend))
}

// GridTrendEqualFold applies the EqualFold predicate on the "gridTrend" field.
func GridTrendEqualFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldEqualFold(FieldGridTrend, v))
}

// GridTrendContainsFold applies the ContainsFold predicate on the "gridTrend" field.
func GridTrendContainsFold(v string) predicate.Strategy {
	return predicate.Strategy(sql.FieldContainsFold(FieldGridTrend, v))
}

// LastLowerThresholdAlertTimeEQ applies the EQ predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLastLowerThresholdAlertTime, v))
}

// LastLowerThresholdAlertTimeNEQ applies the NEQ predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeNEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldLastLowerThresholdAlertTime, v))
}

// LastLowerThresholdAlertTimeIn applies the In predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldLastLowerThresholdAlertTime, vs...))
}

// LastLowerThresholdAlertTimeNotIn applies the NotIn predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeNotIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldLastLowerThresholdAlertTime, vs...))
}

// LastLowerThresholdAlertTimeGT applies the GT predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeGT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldLastLowerThresholdAlertTime, v))
}

// LastLowerThresholdAlertTimeGTE applies the GTE predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeGTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldLastLowerThresholdAlertTime, v))
}

// LastLowerThresholdAlertTimeLT applies the LT predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeLT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldLastLowerThresholdAlertTime, v))
}

// LastLowerThresholdAlertTimeLTE applies the LTE predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeLTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldLastLowerThresholdAlertTime, v))
}

// LastLowerThresholdAlertTimeIsNil applies the IsNil predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldLastLowerThresholdAlertTime))
}

// LastLowerThresholdAlertTimeNotNil applies the NotNil predicate on the "lastLowerThresholdAlertTime" field.
func LastLowerThresholdAlertTimeNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldLastLowerThresholdAlertTime))
}

// LastUpperThresholdAlertTimeEQ applies the EQ predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldEQ(FieldLastUpperThresholdAlertTime, v))
}

// LastUpperThresholdAlertTimeNEQ applies the NEQ predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeNEQ(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNEQ(FieldLastUpperThresholdAlertTime, v))
}

// LastUpperThresholdAlertTimeIn applies the In predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldIn(FieldLastUpperThresholdAlertTime, vs...))
}

// LastUpperThresholdAlertTimeNotIn applies the NotIn predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeNotIn(vs ...time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldNotIn(FieldLastUpperThresholdAlertTime, vs...))
}

// LastUpperThresholdAlertTimeGT applies the GT predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeGT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGT(FieldLastUpperThresholdAlertTime, v))
}

// LastUpperThresholdAlertTimeGTE applies the GTE predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeGTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldGTE(FieldLastUpperThresholdAlertTime, v))
}

// LastUpperThresholdAlertTimeLT applies the LT predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeLT(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLT(FieldLastUpperThresholdAlertTime, v))
}

// LastUpperThresholdAlertTimeLTE applies the LTE predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeLTE(v time.Time) predicate.Strategy {
	return predicate.Strategy(sql.FieldLTE(FieldLastUpperThresholdAlertTime, v))
}

// LastUpperThresholdAlertTimeIsNil applies the IsNil predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeIsNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldIsNull(FieldLastUpperThresholdAlertTime))
}

// LastUpperThresholdAlertTimeNotNil applies the NotNil predicate on the "lastUpperThresholdAlertTime" field.
func LastUpperThresholdAlertTimeNotNil() predicate.Strategy {
	return predicate.Strategy(sql.FieldNotNull(FieldLastUpperThresholdAlertTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Strategy) predicate.Strategy {
	return predicate.Strategy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Strategy) predicate.Strategy {
	return predicate.Strategy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Strategy) predicate.Strategy {
	return predicate.Strategy(sql.NotPredicates(p))
}
