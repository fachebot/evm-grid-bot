// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/grid"
	"github.com/fachebot/evm-grid-bot/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// GridUpdate is the builder for updating Grid entities.
type GridUpdate struct {
	config
	hooks    []Hook
	mutation *GridMutation
}

// Where appends a list predicates to the GridUpdate builder.
func (_u *GridUpdate) Where(ps ...predicate.Grid) *GridUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *GridUpdate) SetUpdateTime(v time.Time) *GridUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetGUID sets the "guid" field.
func (_u *GridUpdate) SetGUID(v string) *GridUpdate {
	_u.mutation.SetGUID(v)
	return _u
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (_u *GridUpdate) SetNillableGUID(v *string) *GridUpdate {
	if v != nil {
		_u.SetGUID(*v)
	}
	return _u
}

// SetAccount sets the "account" field.
func (_u *GridUpdate) SetAccount(v string) *GridUpdate {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *GridUpdate) SetNillableAccount(v *string) *GridUpdate {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *GridUpdate) SetToken(v string) *GridUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *GridUpdate) SetNillableToken(v *string) *GridUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *GridUpdate) SetSymbol(v string) *GridUpdate {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *GridUpdate) SetNillableSymbol(v *string) *GridUpdate {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetStrategyId sets the "strategyId" field.
func (_u *GridUpdate) SetStrategyId(v string) *GridUpdate {
	_u.mutation.SetStrategyId(v)
	return _u
}

// SetNillableStrategyId sets the "strategyId" field if the given value is not nil.
func (_u *GridUpdate) SetNillableStrategyId(v *string) *GridUpdate {
	if v != nil {
		_u.SetStrategyId(*v)
	}
	return _u
}

// SetGridNumber sets the "gridNumber" field.
func (_u *GridUpdate) SetGridNumber(v int) *GridUpdate {
	_u.mutation.ResetGridNumber()
	_u.mutation.SetGridNumber(v)
	return _u
}

// SetNillableGridNumber sets the "gridNumber" field if the given value is not nil.
func (_u *GridUpdate) SetNillableGridNumber(v *int) *GridUpdate {
	if v != nil {
		_u.SetGridNumber(*v)
	}
	return _u
}

// AddGridNumber adds value to the "gridNumber" field.
func (_u *GridUpdate) AddGridNumber(v int) *GridUpdate {
	_u.mutation.AddGridNumber(v)
	return _u
}

// SetOrderPrice sets the "orderPrice" field.
func (_u *GridUpdate) SetOrderPrice(v decimal.Decimal) *GridUpdate {
	_u.mutation.SetOrderPrice(v)
	return _u
}

// SetNillableOrderPrice sets the "orderPrice" field if the given value is not nil.
func (_u *GridUpdate) SetNillableOrderPrice(v *decimal.Decimal) *GridUpdate {
	if v != nil {
		_u.SetOrderPrice(*v)
	}
	return _u
}

// SetFinalPrice sets the "finalPrice" field.
func (_u *GridUpdate) SetFinalPrice(v decimal.Decimal) *GridUpdate {
	_u.mutation.SetFinalPrice(v)
	return _u
}

// SetNillableFinalPrice sets the "finalPrice" field if the given value is not nil.
func (_u *GridUpdate) SetNillableFinalPrice(v *decimal.Decimal) *GridUpdate {
	if v != nil {
		_u.SetFinalPrice(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *GridUpdate) SetAmount(v decimal.Decimal) *GridUpdate {
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *GridUpdate) SetNillableAmount(v *decimal.Decimal) *GridUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *GridUpdate) SetQuantity(v decimal.Decimal) *GridUpdate {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *GridUpdate) SetNillableQuantity(v *decimal.Decimal) *GridUpdate {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *GridUpdate) SetStatus(v grid.Status) *GridUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GridUpdate) SetNillableStatus(v *grid.Status) *GridUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the GridMutation object of the builder.
func (_u *GridUpdate) Mutation() *GridMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GridUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GridUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GridUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GridUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GridUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := grid.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GridUpdate) check() error {
	if v, ok := _u.mutation.GUID(); ok {
		if err := grid.GUIDValidator(v); err != nil {
			return &ValidationError{Name: "guid", err: fmt.Errorf(`ent: validator failed for field "Grid.guid": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Account(); ok {
		if err := grid.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Grid.account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := grid.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Grid.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := grid.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Grid.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StrategyId(); ok {
		if err := grid.StrategyIdValidator(v); err != nil {
			return &ValidationError{Name: "strategyId", err: fmt.Errorf(`ent: validator failed for field "Grid.strategyId": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GridNumber(); ok {
		if err := grid.GridNumberValidator(v); err != nil {
			return &ValidationError{Name: "gridNumber", err: fmt.Errorf(`ent: validator failed for field "Grid.gridNumber": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := grid.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Grid.status": %w`, err)}
		}
	}
	return nil
}

func (_u *GridUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grid.Table, grid.Columns, sqlgraph.NewFieldSpec(grid.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(grid.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.GUID(); ok {
		_spec.SetField(grid.FieldGUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(grid.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(grid.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(grid.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.StrategyId(); ok {
		_spec.SetField(grid.FieldStrategyId, field.TypeString, value)
	}
	if value, ok := _u.mutation.GridNumber(); ok {
		_spec.SetField(grid.FieldGridNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGridNumber(); ok {
		_spec.AddField(grid.FieldGridNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OrderPrice(); ok {
		_spec.SetField(grid.FieldOrderPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.FinalPrice(); ok {
		_spec.SetField(grid.FieldFinalPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(grid.FieldAmount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(grid.FieldQuantity, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(grid.FieldStatus, field.TypeEnum, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GridUpdateOne is the builder for updating a single Grid entity.
type GridUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GridMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *GridUpdateOne) SetUpdateTime(v time.Time) *GridUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetGUID sets the "guid" field.
func (_u *GridUpdateOne) SetGUID(v string) *GridUpdateOne {
	_u.mutation.SetGUID(v)
	return _u
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableGUID(v *string) *GridUpdateOne {
	if v != nil {
		_u.SetGUID(*v)
	}
	return _u
}

// SetAccount sets the "account" field.
func (_u *GridUpdateOne) SetAccount(v string) *GridUpdateOne {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableAccount(v *string) *GridUpdateOne {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *GridUpdateOne) SetToken(v string) *GridUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableToken(v *string) *GridUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *GridUpdateOne) SetSymbol(v string) *GridUpdateOne {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableSymbol(v *string) *GridUpdateOne {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetStrategyId sets the "strategyId" field.
func (_u *GridUpdateOne) SetStrategyId(v string) *GridUpdateOne {
	_u.mutation.SetStrategyId(v)
	return _u
}

// SetNillableStrategyId sets the "strategyId" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableStrategyId(v *string) *GridUpdateOne {
	if v != nil {
		_u.SetStrategyId(*v)
	}
	return _u
}

// SetGridNumber sets the "gridNumber" field.
func (_u *GridUpdateOne) SetGridNumber(v int) *GridUpdateOne {
	_u.mutation.ResetGridNumber()
	_u.mutation.SetGridNumber(v)
	return _u
}

// SetNillableGridNumber sets the "gridNumber" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableGridNumber(v *int) *GridUpdateOne {
	if v != nil {
		_u.SetGridNumber(*v)
	}
	return _u
}

// AddGridNumber adds value to the "gridNumber" field.
func (_u *GridUpdateOne) AddGridNumber(v int) *GridUpdateOne {
	_u.mutation.AddGridNumber(v)
	return _u
}

// SetOrderPrice sets the "orderPrice" field.
func (_u *GridUpdateOne) SetOrderPrice(v decimal.Decimal) *GridUpdateOne {
	_u.mutation.SetOrderPrice(v)
	return _u
}

// SetNillableOrderPrice sets the "orderPrice" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableOrderPrice(v *decimal.Decimal) *GridUpdateOne {
	if v != nil {
		_u.SetOrderPrice(*v)
	}
	return _u
}

// SetFinalPrice sets the "finalPrice" field.
func (_u *GridUpdateOne) SetFinalPrice(v decimal.Decimal) *GridUpdateOne {
	_u.mutation.SetFinalPrice(v)
	return _u
}

// SetNillableFinalPrice sets the "finalPrice" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableFinalPrice(v *decimal.Decimal) *GridUpdateOne {
	if v != nil {
		_u.SetFinalPrice(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *GridUpdateOne) SetAmount(v decimal.Decimal) *GridUpdateOne {
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableAmount(v *decimal.Decimal) *GridUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// SetQuantity sets the "quantity" field.
func (_u *GridUpdateOne) SetQuantity(v decimal.Decimal) *GridUpdateOne {
	_u.mutation.SetQuantity(v)
	return _u
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableQuantity(v *decimal.Decimal) *GridUpdateOne {
	if v != nil {
		_u.SetQuantity(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *GridUpdateOne) SetStatus(v grid.Status) *GridUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *GridUpdateOne) SetNillableStatus(v *grid.Status) *GridUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// Mutation returns the GridMutation object of the builder.
func (_u *GridUpdateOne) Mutation() *GridMutation {
	return _u.mutation
}

// Where appends a list predicates to the GridUpdate builder.
func (_u *GridUpdateOne) Where(ps ...predicate.Grid) *GridUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GridUpdateOne) Select(field string, fields ...string) *GridUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Grid entity.
func (_u *GridUpdateOne) Save(ctx context.Context) (*Grid, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GridUpdateOne) SaveX(ctx context.Context) *Grid {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GridUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GridUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GridUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := grid.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GridUpdateOne) check() error {
	if v, ok := _u.mutation.GUID(); ok {
		if err := grid.GUIDValidator(v); err != nil {
			return &ValidationError{Name: "guid", err: fmt.Errorf(`ent: validator failed for field "Grid.guid": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Account(); ok {
		if err := grid.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Grid.account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := grid.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Grid.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := grid.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Grid.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StrategyId(); ok {
		if err := grid.StrategyIdValidator(v); err != nil {
			return &ValidationError{Name: "strategyId", err: fmt.Errorf(`ent: validator failed for field "Grid.strategyId": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GridNumber(); ok {
		if err := grid.GridNumberValidator(v); err != nil {
			return &ValidationError{Name: "gridNumber", err: fmt.Errorf(`ent: validator failed for field "Grid.gridNumber": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := grid.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Grid.status": %w`, err)}
		}
	}
	return nil
}

func (_u *GridUpdateOne) sqlSave(ctx context.Context) (_node *Grid, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grid.Table, grid.Columns, sqlgraph.NewFieldSpec(grid.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Grid.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grid.FieldID)
		for _, f := range fields {
			if !grid.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grid.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(grid.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.GUID(); ok {
		_spec.SetField(grid.FieldGUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(grid.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(grid.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(grid.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.StrategyId(); ok {
		_spec.SetField(grid.FieldStrategyId, field.TypeString, value)
	}
	if value, ok := _u.mutation.GridNumber(); ok {
		_spec.SetField(grid.FieldGridNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedGridNumber(); ok {
		_spec.AddField(grid.FieldGridNumber, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OrderPrice(); ok {
		_spec.SetField(grid.FieldOrderPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.FinalPrice(); ok {
		_spec.SetField(grid.FieldFinalPrice, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(grid.FieldAmount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Quantity(); ok {
		_spec.SetField(grid.FieldQuantity, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(grid.FieldStatus, field.TypeEnum, value)
	}
	_node = &Grid{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grid.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
