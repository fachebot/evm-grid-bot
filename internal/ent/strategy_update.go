// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/predicate"
	"github.com/fachebot/evm-grid-bot/internal/ent/strategy"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// StrategyUpdate is the builder for updating Strategy entities.
type StrategyUpdate struct {
	config
	hooks    []Hook
	mutation *StrategyMutation
}

// Where appends a list predicates to the StrategyUpdate builder.
func (_u *StrategyUpdate) Where(ps ...predicate.Strategy) *StrategyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *StrategyUpdate) SetUpdateTime(v time.Time) *StrategyUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetGUID sets the "guid" field.
func (_u *StrategyUpdate) SetGUID(v string) *StrategyUpdate {
	_u.mutation.SetGUID(v)
	return _u
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableGUID(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetGUID(*v)
	}
	return _u
}

// SetUserId sets the "userId" field.
func (_u *StrategyUpdate) SetUserId(v int64) *StrategyUpdate {
	_u.mutation.ResetUserId()
	_u.mutation.SetUserId(v)
	return _u
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableUserId(v *int64) *StrategyUpdate {
	if v != nil {
		_u.SetUserId(*v)
	}
	return _u
}

// AddUserId adds value to the "userId" field.
func (_u *StrategyUpdate) AddUserId(v int64) *StrategyUpdate {
	_u.mutation.AddUserId(v)
	return _u
}

// SetToken sets the "token" field.
func (_u *StrategyUpdate) SetToken(v string) *StrategyUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableToken(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *StrategyUpdate) SetSymbol(v string) *StrategyUpdate {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableSymbol(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetMartinFactor sets the "martinFactor" field.
func (_u *StrategyUpdate) SetMartinFactor(v float64) *StrategyUpdate {
	_u.mutation.ResetMartinFactor()
	_u.mutation.SetMartinFactor(v)
	return _u
}

// SetNillableMartinFactor sets the "martinFactor" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableMartinFactor(v *float64) *StrategyUpdate {
	if v != nil {
		_u.SetMartinFactor(*v)
	}
	return _u
}

// AddMartinFactor adds value to the "martinFactor" field.
func (_u *StrategyUpdate) AddMartinFactor(v float64) *StrategyUpdate {
	_u.mutation.AddMartinFactor(v)
	return _u
}

// SetMaxGridLimit sets the "maxGridLimit" field.
func (_u *StrategyUpdate) SetMaxGridLimit(v int) *StrategyUpdate {
	_u.mutation.ResetMaxGridLimit()
	_u.mutation.SetMaxGridLimit(v)
	return _u
}

// SetNillableMaxGridLimit sets the "maxGridLimit" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableMaxGridLimit(v *int) *StrategyUpdate {
	if v != nil {
		_u.SetMaxGridLimit(*v)
	}
	return _u
}

// AddMaxGridLimit adds value to the "maxGridLimit" field.
func (_u *StrategyUpdate) AddMaxGridLimit(v int) *StrategyUpdate {
	_u.mutation.AddMaxGridLimit(v)
	return _u
}

// ClearMaxGridLimit clears the value of the "maxGridLimit" field.
func (_u *StrategyUpdate) ClearMaxGridLimit() *StrategyUpdate {
	_u.mutation.ClearMaxGridLimit()
	return _u
}

// SetTakeProfitRatio sets the "takeProfitRatio" field.
func (_u *StrategyUpdate) SetTakeProfitRatio(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetTakeProfitRatio(v)
	return _u
}

// SetNillableTakeProfitRatio sets the "takeProfitRatio" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableTakeProfitRatio(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetTakeProfitRatio(*v)
	}
	return _u
}

// SetUpperPriceBound sets the "upperPriceBound" field.
func (_u *StrategyUpdate) SetUpperPriceBound(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetUpperPriceBound(v)
	return _u
}

// SetNillableUpperPriceBound sets the "upperPriceBound" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableUpperPriceBound(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetUpperPriceBound(*v)
	}
	return _u
}

// SetLowerPriceBound sets the "lowerPriceBound" field.
func (_u *StrategyUpdate) SetLowerPriceBound(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetLowerPriceBound(v)
	return _u
}

// SetNillableLowerPriceBound sets the "lowerPriceBound" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableLowerPriceBound(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetLowerPriceBound(*v)
	}
	return _u
}

// SetInitialOrderSize sets the "initialOrderSize" field.
func (_u *StrategyUpdate) SetInitialOrderSize(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetInitialOrderSize(v)
	return _u
}

// SetNillableInitialOrderSize sets the "initialOrderSize" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableInitialOrderSize(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetInitialOrderSize(*v)
	}
	return _u
}

// SetLastKlineVolume sets the "lastKlineVolume" field.
func (_u *StrategyUpdate) SetLastKlineVolume(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetLastKlineVolume(v)
	return _u
}

// SetNillableLastKlineVolume sets the "lastKlineVolume" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableLastKlineVolume(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetLastKlineVolume(*v)
	}
	return _u
}

// ClearLastKlineVolume clears the value of the "lastKlineVolume" field.
func (_u *StrategyUpdate) ClearLastKlineVolume() *StrategyUpdate {
	_u.mutation.ClearLastKlineVolume()
	return _u
}

// SetFiveKlineVolume sets the "fiveKlineVolume" field.
func (_u *StrategyUpdate) SetFiveKlineVolume(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetFiveKlineVolume(v)
	return _u
}

// SetNillableFiveKlineVolume sets the "fiveKlineVolume" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableFiveKlineVolume(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetFiveKlineVolume(*v)
	}
	return _u
}

// ClearFiveKlineVolume clears the value of the "fiveKlineVolume" field.
func (_u *StrategyUpdate) ClearFiveKlineVolume() *StrategyUpdate {
	_u.mutation.ClearFiveKlineVolume()
	return _u
}

// SetFirstOrderId sets the "firstOrderId" field.
func (_u *StrategyUpdate) SetFirstOrderId(v int) *StrategyUpdate {
	_u.mutation.ResetFirstOrderId()
	_u.mutation.SetFirstOrderId(v)
	return _u
}

// SetNillableFirstOrderId sets the "firstOrderId" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableFirstOrderId(v *int) *StrategyUpdate {
	if v != nil {
		_u.SetFirstOrderId(*v)
	}
	return _u
}

// AddFirstOrderId adds value to the "firstOrderId" field.
func (_u *StrategyUpdate) AddFirstOrderId(v int) *StrategyUpdate {
	_u.mutation.AddFirstOrderId(v)
	return _u
}

// ClearFirstOrderId clears the value of the "firstOrderId" field.
func (_u *StrategyUpdate) ClearFirstOrderId() *StrategyUpdate {
	_u.mutation.ClearFirstOrderId()
	return _u
}

// SetUpperBoundExit sets the "upperBoundExit" field.
func (_u *StrategyUpdate) SetUpperBoundExit(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetUpperBoundExit(v)
	return _u
}

// SetNillableUpperBoundExit sets the "upperBoundExit" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableUpperBoundExit(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetUpperBoundExit(*v)
	}
	return _u
}

// ClearUpperBoundExit clears the value of the "upperBoundExit" field.
func (_u *StrategyUpdate) ClearUpperBoundExit() *StrategyUpdate {
	_u.mutation.ClearUpperBoundExit()
	return _u
}

// SetStopLossExit sets the "stopLossExit" field.
func (_u *StrategyUpdate) SetStopLossExit(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetStopLossExit(v)
	return _u
}

// SetNillableStopLossExit sets the "stopLossExit" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableStopLossExit(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetStopLossExit(*v)
	}
	return _u
}

// ClearStopLossExit clears the value of the "stopLossExit" field.
func (_u *StrategyUpdate) ClearStopLossExit() *StrategyUpdate {
	_u.mutation.ClearStopLossExit()
	return _u
}

// SetTakeProfitExit sets the "takeProfitExit" field.
func (_u *StrategyUpdate) SetTakeProfitExit(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetTakeProfitExit(v)
	return _u
}

// SetNillableTakeProfitExit sets the "takeProfitExit" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableTakeProfitExit(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetTakeProfitExit(*v)
	}
	return _u
}

// ClearTakeProfitExit clears the value of the "takeProfitExit" field.
func (_u *StrategyUpdate) ClearTakeProfitExit() *StrategyUpdate {
	_u.mutation.ClearTakeProfitExit()
	return _u
}

// SetGlobalTakeProfitRatio sets the "globalTakeProfitRatio" field.
func (_u *StrategyUpdate) SetGlobalTakeProfitRatio(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetGlobalTakeProfitRatio(v)
	return _u
}

// SetNillableGlobalTakeProfitRatio sets the "globalTakeProfitRatio" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableGlobalTakeProfitRatio(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetGlobalTakeProfitRatio(*v)
	}
	return _u
}

// ClearGlobalTakeProfitRatio clears the value of the "globalTakeProfitRatio" field.
func (_u *StrategyUpdate) ClearGlobalTakeProfitRatio() *StrategyUpdate {
	_u.mutation.ClearGlobalTakeProfitRatio()
	return _u
}

// SetDynamicStopLoss sets the "dynamicStopLoss" field.
func (_u *StrategyUpdate) SetDynamicStopLoss(v bool) *StrategyUpdate {
	_u.mutation.SetDynamicStopLoss(v)
	return _u
}

// SetNillableDynamicStopLoss sets the "dynamicStopLoss" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableDynamicStopLoss(v *bool) *StrategyUpdate {
	if v != nil {
		_u.SetDynamicStopLoss(*v)
	}
	return _u
}

// ClearDynamicStopLoss clears the value of the "dynamicStopLoss" field.
func (_u *StrategyUpdate) ClearDynamicStopLoss() *StrategyUpdate {
	_u.mutation.ClearDynamicStopLoss()
	return _u
}

// SetDropOn sets the "dropOn" field.
func (_u *StrategyUpdate) SetDropOn(v bool) *StrategyUpdate {
	_u.mutation.SetDropOn(v)
	return _u
}

// SetNillableDropOn sets the "dropOn" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableDropOn(v *bool) *StrategyUpdate {
	if v != nil {
		_u.SetDropOn(*v)
	}
	return _u
}

// ClearDropOn clears the value of the "dropOn" field.
func (_u *StrategyUpdate) ClearDropOn() *StrategyUpdate {
	_u.mutation.ClearDropOn()
	return _u
}

// SetCandlesToCheck sets the "candlesToCheck" field.
func (_u *StrategyUpdate) SetCandlesToCheck(v int) *StrategyUpdate {
	_u.mutation.ResetCandlesToCheck()
	_u.mutation.SetCandlesToCheck(v)
	return _u
}

// SetNillableCandlesToCheck sets the "candlesToCheck" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableCandlesToCheck(v *int) *StrategyUpdate {
	if v != nil {
		_u.SetCandlesToCheck(*v)
	}
	return _u
}

// AddCandlesToCheck adds value to the "candlesToCheck" field.
func (_u *StrategyUpdate) AddCandlesToCheck(v int) *StrategyUpdate {
	_u.mutation.AddCandlesToCheck(v)
	return _u
}

// ClearCandlesToCheck clears the value of the "candlesToCheck" field.
func (_u *StrategyUpdate) ClearCandlesToCheck() *StrategyUpdate {
	_u.mutation.ClearCandlesToCheck()
	return _u
}

// SetDropThreshold sets the "dropThreshold" field.
func (_u *StrategyUpdate) SetDropThreshold(v decimal.Decimal) *StrategyUpdate {
	_u.mutation.SetDropThreshold(v)
	return _u
}

// SetNillableDropThreshold sets the "dropThreshold" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableDropThreshold(v *decimal.Decimal) *StrategyUpdate {
	if v != nil {
		_u.SetDropThreshold(*v)
	}
	return _u
}

// ClearDropThreshold clears the value of the "dropThreshold" field.
func (_u *StrategyUpdate) ClearDropThreshold() *StrategyUpdate {
	_u.mutation.ClearDropThreshold()
	return _u
}

// SetEnableAutoBuy sets the "enableAutoBuy" field.
func (_u *StrategyUpdate) SetEnableAutoBuy(v bool) *StrategyUpdate {
	_u.mutation.SetEnableAutoBuy(v)
	return _u
}

// SetNillableEnableAutoBuy sets the "enableAutoBuy" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableEnableAutoBuy(v *bool) *StrategyUpdate {
	if v != nil {
		_u.SetEnableAutoBuy(*v)
	}
	return _u
}

// SetEnableAutoSell sets the "enableAutoSell" field.
func (_u *StrategyUpdate) SetEnableAutoSell(v bool) *StrategyUpdate {
	_u.mutation.SetEnableAutoSell(v)
	return _u
}

// SetNillableEnableAutoSell sets the "enableAutoSell" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableEnableAutoSell(v *bool) *StrategyUpdate {
	if v != nil {
		_u.SetEnableAutoSell(*v)
	}
	return _u
}

// SetEnableAutoExit sets the "enableAutoExit" field.
func (_u *StrategyUpdate) SetEnableAutoExit(v bool) *StrategyUpdate {
	_u.mutation.SetEnableAutoExit(v)
	return _u
}

// SetNillableEnableAutoExit sets the "enableAutoExit" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableEnableAutoExit(v *bool) *StrategyUpdate {
	if v != nil {
		_u.SetEnableAutoExit(*v)
	}
	return _u
}

// SetEnablePushNotification sets the "enablePushNotification" field.
func (_u *StrategyUpdate) SetEnablePushNotification(v bool) *StrategyUpdate {
	_u.mutation.SetEnablePushNotification(v)
	return _u
}

// SetNillableEnablePushNotification sets the "enablePushNotification" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableEnablePushNotification(v *bool) *StrategyUpdate {
	if v != nil {
		_u.SetEnablePushNotification(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *StrategyUpdate) SetStatus(v strategy.Status) *StrategyUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableStatus(v *strategy.Status) *StrategyUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetGridTrend sets the "gridTrend" field.
func (_u *StrategyUpdate) SetGridTrend(v string) *StrategyUpdate {
	_u.mutation.SetGridTrend(v)
	return _u
}

// SetNillableGridTrend sets the "gridTrend" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableGridTrend(v *string) *StrategyUpdate {
	if v != nil {
		_u.SetGridTrend(*v)
	}
	return _u
}

// ClearGridTrend clears the value of the "gridTrend" field.
func (_u *StrategyUpdate) ClearGridTrend() *StrategyUpdate {
	_u.mutation.ClearGridTrend()
	return _u
}

// SetLastLowerThresholdAlertTime sets the "lastLowerThresholdAlertTime" field.
func (_u *StrategyUpdate) SetLastLowerThresholdAlertTime(v time.Time) *StrategyUpdate {
	_u.mutation.SetLastLowerThresholdAlertTime(v)
	return _u
}

// SetNillableLastLowerThresholdAlertTime sets the "lastLowerThresholdAlertTime" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableLastLowerThresholdAlertTime(v *time.Time) *StrategyUpdate {
	if v != nil {
		_u.SetLastLowerThresholdAlertTime(*v)
	}
	return _u
}

// ClearLastLowerThresholdAlertTime clears the value of the "lastLowerThresholdAlertTime" field.
func (_u *StrategyUpdate) ClearLastLowerThresholdAlertTime() *StrategyUpdate {
	_u.mutation.ClearLastLowerThresholdAlertTime()
	return _u
}

// SetLastUpperThresholdAlertTime sets the "lastUpperThresholdAlertTime" field.
func (_u *StrategyUpdate) SetLastUpperThresholdAlertTime(v time.Time) *StrategyUpdate {
	_u.mutation.SetLastUpperThresholdAlertTime(v)
	return _u
}

// SetNillableLastUpperThresholdAlertTime sets the "lastUpperThresholdAlertTime" field if the given value is not nil.
func (_u *StrategyUpdate) SetNillableLastUpperThresholdAlertTime(v *time.Time) *StrategyUpdate {
	if v != nil {
		_u.SetLastUpperThresholdAlertTime(*v)
	}
	return _u
}

// ClearLastUpperThresholdAlertTime clears the value of the "lastUpperThresholdAlertTime" field.
func (_u *StrategyUpdate) ClearLastUpperThresholdAlertTime() *StrategyUpdate {
	_u.mutation.ClearLastUpperThresholdAlertTime()
	return _u
}

// Mutation returns the StrategyMutation object of the builder.
func (_u *StrategyUpdate) Mutation() *StrategyMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StrategyUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StrategyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := strategy.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyUpdate) check() error {
	if v, ok := _u.mutation.GUID(); ok {
		if err := strategy.GUIDValidator(v); err != nil {
			return &ValidationError{Name: "guid", err: fmt.Errorf(`ent: validator failed for field "Strategy.guid": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := strategy.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Strategy.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := strategy.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Strategy.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MartinFactor(); ok {
		if err := strategy.MartinFactorValidator(v); err != nil {
			return &ValidationError{Name: "martinFactor", err: fmt.Errorf(`ent: validator failed for field "Strategy.martinFactor": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MaxGridLimit(); ok {
		if err := strategy.MaxGridLimitValidator(v); err != nil {
			return &ValidationError{Name: "maxGridLimit", err: fmt.Errorf(`ent: validator failed for field "Strategy.maxGridLimit": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := strategy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Strategy.status": %w`, err)}
		}
	}
	return nil
}

func (_u *StrategyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategy.Table, strategy.Columns, sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(strategy.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.GUID(); ok {
		_spec.SetField(strategy.FieldGUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserId(); ok {
		_spec.SetField(strategy.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserId(); ok {
		_spec.AddField(strategy.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(strategy.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(strategy.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.MartinFactor(); ok {
		_spec.SetField(strategy.FieldMartinFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMartinFactor(); ok {
		_spec.AddField(strategy.FieldMartinFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.MaxGridLimit(); ok {
		_spec.SetField(strategy.FieldMaxGridLimit, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxGridLimit(); ok {
		_spec.AddField(strategy.FieldMaxGridLimit, field.TypeInt, value)
	}
	if _u.mutation.MaxGridLimitCleared() {
		_spec.ClearField(strategy.FieldMaxGridLimit, field.TypeInt)
	}
	if value, ok := _u.mutation.TakeProfitRatio(); ok {
		_spec.SetField(strategy.FieldTakeProfitRatio, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpperPriceBound(); ok {
		_spec.SetField(strategy.FieldUpperPriceBound, field.TypeString, value)
	}
	if value, ok := _u.mutation.LowerPriceBound(); ok {
		_spec.SetField(strategy.FieldLowerPriceBound, field.TypeString, value)
	}
	if value, ok := _u.mutation.InitialOrderSize(); ok {
		_spec.SetField(strategy.FieldInitialOrderSize, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastKlineVolume(); ok {
		_spec.SetField(strategy.FieldLastKlineVolume, field.TypeString, value)
	}
	if _u.mutation.LastKlineVolumeCleared() {
		_spec.ClearField(strategy.FieldLastKlineVolume, field.TypeString)
	}
	if value, ok := _u.mutation.FiveKlineVolume(); ok {
		_spec.SetField(strategy.FieldFiveKlineVolume, field.TypeString, value)
	}
	if _u.mutation.FiveKlineVolumeCleared() {
		_spec.ClearField(strategy.FieldFiveKlineVolume, field.TypeString)
	}
	if value, ok := _u.mutation.FirstOrderId(); ok {
		_spec.SetField(strategy.FieldFirstOrderId, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFirstOrderId(); ok {
		_spec.AddField(strategy.FieldFirstOrderId, field.TypeInt, value)
	}
	if _u.mutation.FirstOrderIdCleared() {
		_spec.ClearField(strategy.FieldFirstOrderId, field.TypeInt)
	}
	if value, ok := _u.mutation.UpperBoundExit(); ok {
		_spec.SetField(strategy.FieldUpperBoundExit, field.TypeString, value)
	}
	if _u.mutation.UpperBoundExitCleared() {
		_spec.ClearField(strategy.FieldUpperBoundExit, field.TypeString)
	}
	if value, ok := _u.mutation.StopLossExit(); ok {
		_spec.SetField(strategy.FieldStopLossExit, field.TypeString, value)
	}
	if _u.mutation.StopLossExitCleared() {
		_spec.ClearField(strategy.FieldStopLossExit, field.TypeString)
	}
	if value, ok := _u.mutation.TakeProfitExit(); ok {
		_spec.SetField(strategy.FieldTakeProfitExit, field.TypeString, value)
	}
	if _u.mutation.TakeProfitExitCleared() {
		_spec.ClearField(strategy.FieldTakeProfitExit, field.TypeString)
	}
	if value, ok := _u.mutation.GlobalTakeProfitRatio(); ok {
		_spec.SetField(strategy.FieldGlobalTakeProfitRatio, field.TypeString, value)
	}
	if _u.mutation.GlobalTakeProfitRatioCleared() {
		_spec.ClearField(strategy.FieldGlobalTakeProfitRatio, field.TypeString)
	}
	if value, ok := _u.mutation.DynamicStopLoss(); ok {
		_spec.SetField(strategy.FieldDynamicStopLoss, field.TypeBool, value)
	}
	if _u.mutation.DynamicStopLossCleared() {
		_spec.ClearField(strategy.FieldDynamicStopLoss, field.TypeBool)
	}
	if value, ok := _u.mutation.DropOn(); ok {
		_spec.SetField(strategy.FieldDropOn, field.TypeBool, value)
	}
	if _u.mutation.DropOnCleared() {
		_spec.ClearField(strategy.FieldDropOn, field.TypeBool)
	}
	if value, ok := _u.mutation.CandlesToCheck(); ok {
		_spec.SetField(strategy.FieldCandlesToCheck, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCandlesToCheck(); ok {
		_spec.AddField(strategy.FieldCandlesToCheck, field.TypeInt, value)
	}
	if _u.mutation.CandlesToCheckCleared() {
		_spec.ClearField(strategy.FieldCandlesToCheck, field.TypeInt)
	}
	if value, ok := _u.mutation.DropThreshold(); ok {
		_spec.SetField(strategy.FieldDropThreshold, field.TypeString, value)
	}
	if _u.mutation.DropThresholdCleared() {
		_spec.ClearField(strategy.FieldDropThreshold, field.TypeString)
	}
	if value, ok := _u.mutation.EnableAutoBuy(); ok {
		_spec.SetField(strategy.FieldEnableAutoBuy, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnableAutoSell(); ok {
		_spec.SetField(strategy.FieldEnableAutoSell, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnableAutoExit(); ok {
		_spec.SetField(strategy.FieldEnableAutoExit, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnablePushNotification(); ok {
		_spec.SetField(strategy.FieldEnablePushNotification, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(strategy.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.GridTrend(); ok {
		_spec.SetField(strategy.FieldGridTrend, field.TypeString, value)
	}
	if _u.mutation.GridTrendCleared() {
		_spec.ClearField(strategy.FieldGridTrend, field.TypeString)
	}
	if value, ok := _u.mutation.LastLowerThresholdAlertTime(); ok {
		_spec.SetField(strategy.FieldLastLowerThresholdAlertTime, field.TypeTime, value)
	}
	if _u.mutation.LastLowerThresholdAlertTimeCleared() {
		_spec.ClearField(strategy.FieldLastLowerThresholdAlertTime, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUpperThresholdAlertTime(); ok {
		_spec.SetField(strategy.FieldLastUpperThresholdAlertTime, field.TypeTime, value)
	}
	if _u.mutation.LastUpperThresholdAlertTimeCleared() {
		_spec.ClearField(strategy.FieldLastUpperThresholdAlertTime, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StrategyUpdateOne is the builder for updating a single Strategy entity.
type StrategyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StrategyMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *StrategyUpdateOne) SetUpdateTime(v time.Time) *StrategyUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetGUID sets the "guid" field.
func (_u *StrategyUpdateOne) SetGUID(v string) *StrategyUpdateOne {
	_u.mutation.SetGUID(v)
	return _u
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableGUID(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetGUID(*v)
	}
	return _u
}

// SetUserId sets the "userId" field.
func (_u *StrategyUpdateOne) SetUserId(v int64) *StrategyUpdateOne {
	_u.mutation.ResetUserId()
	_u.mutation.SetUserId(v)
	return _u
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableUserId(v *int64) *StrategyUpdateOne {
	if v != nil {
		_u.SetUserId(*v)
	}
	return _u
}

// AddUserId adds value to the "userId" field.
func (_u *StrategyUpdateOne) AddUserId(v int64) *StrategyUpdateOne {
	_u.mutation.AddUserId(v)
	return _u
}

// SetToken sets the "token" field.
func (_u *StrategyUpdateOne) SetToken(v string) *StrategyUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableToken(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetSymbol sets the "symbol" field.
func (_u *StrategyUpdateOne) SetSymbol(v string) *StrategyUpdateOne {
	_u.mutation.SetSymbol(v)
	return _u
}

// SetNillableSymbol sets the "symbol" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableSymbol(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetSymbol(*v)
	}
	return _u
}

// SetMartinFactor sets the "martinFactor" field.
func (_u *StrategyUpdateOne) SetMartinFactor(v float64) *StrategyUpdateOne {
	_u.mutation.ResetMartinFactor()
	_u.mutation.SetMartinFactor(v)
	return _u
}

// SetNillableMartinFactor sets the "martinFactor" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableMartinFactor(v *float64) *StrategyUpdateOne {
	if v != nil {
		_u.SetMartinFactor(*v)
	}
	return _u
}

// AddMartinFactor adds value to the "martinFactor" field.
func (_u *StrategyUpdateOne) AddMartinFactor(v float64) *StrategyUpdateOne {
	_u.mutation.AddMartinFactor(v)
	return _u
}

// SetMaxGridLimit sets the "maxGridLimit" field.
func (_u *StrategyUpdateOne) SetMaxGridLimit(v int) *StrategyUpdateOne {
	_u.mutation.ResetMaxGridLimit()
	_u.mutation.SetMaxGridLimit(v)
	return _u
}

// SetNillableMaxGridLimit sets the "maxGridLimit" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableMaxGridLimit(v *int) *StrategyUpdateOne {
	if v != nil {
		_u.SetMaxGridLimit(*v)
	}
	return _u
}

// AddMaxGridLimit adds value to the "maxGridLimit" field.
func (_u *StrategyUpdateOne) AddMaxGridLimit(v int) *StrategyUpdateOne {
	_u.mutation.AddMaxGridLimit(v)
	return _u
}

// ClearMaxGridLimit clears the value of the "maxGridLimit" field.
func (_u *StrategyUpdateOne) ClearMaxGridLimit() *StrategyUpdateOne {
	_u.mutation.ClearMaxGridLimit()
	return _u
}

// SetTakeProfitRatio sets the "takeProfitRatio" field.
func (_u *StrategyUpdateOne) SetTakeProfitRatio(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetTakeProfitRatio(v)
	return _u
}

// SetNillableTakeProfitRatio sets the "takeProfitRatio" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableTakeProfitRatio(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetTakeProfitRatio(*v)
	}
	return _u
}

// SetUpperPriceBound sets the "upperPriceBound" field.
func (_u *StrategyUpdateOne) SetUpperPriceBound(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetUpperPriceBound(v)
	return _u
}

// SetNillableUpperPriceBound sets the "upperPriceBound" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableUpperPriceBound(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetUpperPriceBound(*v)
	}
	return _u
}

// SetLowerPriceBound sets the "lowerPriceBound" field.
func (_u *StrategyUpdateOne) SetLowerPriceBound(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetLowerPriceBound(v)
	return _u
}

// SetNillableLowerPriceBound sets the "lowerPriceBound" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableLowerPriceBound(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetLowerPriceBound(*v)
	}
	return _u
}

// SetInitialOrderSize sets the "initialOrderSize" field.
func (_u *StrategyUpdateOne) SetInitialOrderSize(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetInitialOrderSize(v)
	return _u
}

// SetNillableInitialOrderSize sets the "initialOrderSize" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableInitialOrderSize(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetInitialOrderSize(*v)
	}
	return _u
}

// SetLastKlineVolume sets the "lastKlineVolume" field.
func (_u *StrategyUpdateOne) SetLastKlineVolume(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetLastKlineVolume(v)
	return _u
}

// SetNillableLastKlineVolume sets the "lastKlineVolume" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableLastKlineVolume(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetLastKlineVolume(*v)
	}
	return _u
}

// ClearLastKlineVolume clears the value of the "lastKlineVolume" field.
func (_u *StrategyUpdateOne) ClearLastKlineVolume() *StrategyUpdateOne {
	_u.mutation.ClearLastKlineVolume()
	return _u
}

// SetFiveKlineVolume sets the "fiveKlineVolume" field.
func (_u *StrategyUpdateOne) SetFiveKlineVolume(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetFiveKlineVolume(v)
	return _u
}

// SetNillableFiveKlineVolume sets the "fiveKlineVolume" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableFiveKlineVolume(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetFiveKlineVolume(*v)
	}
	return _u
}

// ClearFiveKlineVolume clears the value of the "fiveKlineVolume" field.
func (_u *StrategyUpdateOne) ClearFiveKlineVolume() *StrategyUpdateOne {
	_u.mutation.ClearFiveKlineVolume()
	return _u
}

// SetFirstOrderId sets the "firstOrderId" field.
func (_u *StrategyUpdateOne) SetFirstOrderId(v int) *StrategyUpdateOne {
	_u.mutation.ResetFirstOrderId()
	_u.mutation.SetFirstOrderId(v)
	return _u
}

// SetNillableFirstOrderId sets the "firstOrderId" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableFirstOrderId(v *int) *StrategyUpdateOne {
	if v != nil {
		_u.SetFirstOrderId(*v)
	}
	return _u
}

// AddFirstOrderId adds value to the "firstOrderId" field.
func (_u *StrategyUpdateOne) AddFirstOrderId(v int) *StrategyUpdateOne {
	_u.mutation.AddFirstOrderId(v)
	return _u
}

// ClearFirstOrderId clears the value of the "firstOrderId" field.
func (_u *StrategyUpdateOne) ClearFirstOrderId() *StrategyUpdateOne {
	_u.mutation.ClearFirstOrderId()
	return _u
}

// SetUpperBoundExit sets the "upperBoundExit" field.
func (_u *StrategyUpdateOne) SetUpperBoundExit(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetUpperBoundExit(v)
	return _u
}

// SetNillableUpperBoundExit sets the "upperBoundExit" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableUpperBoundExit(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetUpperBoundExit(*v)
	}
	return _u
}

// ClearUpperBoundExit clears the value of the "upperBoundExit" field.
func (_u *StrategyUpdateOne) ClearUpperBoundExit() *StrategyUpdateOne {
	_u.mutation.ClearUpperBoundExit()
	return _u
}

// SetStopLossExit sets the "stopLossExit" field.
func (_u *StrategyUpdateOne) SetStopLossExit(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetStopLossExit(v)
	return _u
}

// SetNillableStopLossExit sets the "stopLossExit" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableStopLossExit(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetStopLossExit(*v)
	}
	return _u
}

// ClearStopLossExit clears the value of the "stopLossExit" field.
func (_u *StrategyUpdateOne) ClearStopLossExit() *StrategyUpdateOne {
	_u.mutation.ClearStopLossExit()
	return _u
}

// SetTakeProfitExit sets the "takeProfitExit" field.
func (_u *StrategyUpdateOne) SetTakeProfitExit(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetTakeProfitExit(v)
	return _u
}

// SetNillableTakeProfitExit sets the "takeProfitExit" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableTakeProfitExit(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetTakeProfitExit(*v)
	}
	return _u
}

// ClearTakeProfitExit clears the value of the "takeProfitExit" field.
func (_u *StrategyUpdateOne) ClearTakeProfitExit() *StrategyUpdateOne {
	_u.mutation.ClearTakeProfitExit()
	return _u
}

// SetGlobalTakeProfitRatio sets the "globalTakeProfitRatio" field.
func (_u *StrategyUpdateOne) SetGlobalTakeProfitRatio(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetGlobalTakeProfitRatio(v)
	return _u
}

// SetNillableGlobalTakeProfitRatio sets the "globalTakeProfitRatio" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableGlobalTakeProfitRatio(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetGlobalTakeProfitRatio(*v)
	}
	return _u
}

// ClearGlobalTakeProfitRatio clears the value of the "globalTakeProfitRatio" field.
func (_u *StrategyUpdateOne) ClearGlobalTakeProfitRatio() *StrategyUpdateOne {
	_u.mutation.ClearGlobalTakeProfitRatio()
	return _u
}

// SetDynamicStopLoss sets the "dynamicStopLoss" field.
func (_u *StrategyUpdateOne) SetDynamicStopLoss(v bool) *StrategyUpdateOne {
	_u.mutation.SetDynamicStopLoss(v)
	return _u
}

// SetNillableDynamicStopLoss sets the "dynamicStopLoss" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableDynamicStopLoss(v *bool) *StrategyUpdateOne {
	if v != nil {
		_u.SetDynamicStopLoss(*v)
	}
	return _u
}

// ClearDynamicStopLoss clears the value of the "dynamicStopLoss" field.
func (_u *StrategyUpdateOne) ClearDynamicStopLoss() *StrategyUpdateOne {
	_u.mutation.ClearDynamicStopLoss()
	return _u
}

// SetDropOn sets the "dropOn" field.
func (_u *StrategyUpdateOne) SetDropOn(v bool) *StrategyUpdateOne {
	_u.mutation.SetDropOn(v)
	return _u
}

// SetNillableDropOn sets the "dropOn" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableDropOn(v *bool) *StrategyUpdateOne {
	if v != nil {
		_u.SetDropOn(*v)
	}
	return _u
}

// ClearDropOn clears the value of the "dropOn" field.
func (_u *StrategyUpdateOne) ClearDropOn() *StrategyUpdateOne {
	_u.mutation.ClearDropOn()
	return _u
}

// SetCandlesToCheck sets the "candlesToCheck" field.
func (_u *StrategyUpdateOne) SetCandlesToCheck(v int) *StrategyUpdateOne {
	_u.mutation.ResetCandlesToCheck()
	_u.mutation.SetCandlesToCheck(v)
	return _u
}

// SetNillableCandlesToCheck sets the "candlesToCheck" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableCandlesToCheck(v *int) *StrategyUpdateOne {
	if v != nil {
		_u.SetCandlesToCheck(*v)
	}
	return _u
}

// AddCandlesToCheck adds value to the "candlesToCheck" field.
func (_u *StrategyUpdateOne) AddCandlesToCheck(v int) *StrategyUpdateOne {
	_u.mutation.AddCandlesToCheck(v)
	return _u
}

// ClearCandlesToCheck clears the value of the "candlesToCheck" field.
func (_u *StrategyUpdateOne) ClearCandlesToCheck() *StrategyUpdateOne {
	_u.mutation.ClearCandlesToCheck()
	return _u
}

// SetDropThreshold sets the "dropThreshold" field.
func (_u *StrategyUpdateOne) SetDropThreshold(v decimal.Decimal) *StrategyUpdateOne {
	_u.mutation.SetDropThreshold(v)
	return _u
}

// SetNillableDropThreshold sets the "dropThreshold" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableDropThreshold(v *decimal.Decimal) *StrategyUpdateOne {
	if v != nil {
		_u.SetDropThreshold(*v)
	}
	return _u
}

// ClearDropThreshold clears the value of the "dropThreshold" field.
func (_u *StrategyUpdateOne) ClearDropThreshold() *StrategyUpdateOne {
	_u.mutation.ClearDropThreshold()
	return _u
}

// SetEnableAutoBuy sets the "enableAutoBuy" field.
func (_u *StrategyUpdateOne) SetEnableAutoBuy(v bool) *StrategyUpdateOne {
	_u.mutation.SetEnableAutoBuy(v)
	return _u
}

// SetNillableEnableAutoBuy sets the "enableAutoBuy" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableEnableAutoBuy(v *bool) *StrategyUpdateOne {
	if v != nil {
		_u.SetEnableAutoBuy(*v)
	}
	return _u
}

// SetEnableAutoSell sets the "enableAutoSell" field.
func (_u *StrategyUpdateOne) SetEnableAutoSell(v bool) *StrategyUpdateOne {
	_u.mutation.SetEnableAutoSell(v)
	return _u
}

// SetNillableEnableAutoSell sets the "enableAutoSell" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableEnableAutoSell(v *bool) *StrategyUpdateOne {
	if v != nil {
		_u.SetEnableAutoSell(*v)
	}
	return _u
}

// SetEnableAutoExit sets the "enableAutoExit" field.
func (_u *StrategyUpdateOne) SetEnableAutoExit(v bool) *StrategyUpdateOne {
	_u.mutation.SetEnableAutoExit(v)
	return _u
}

// SetNillableEnableAutoExit sets the "enableAutoExit" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableEnableAutoExit(v *bool) *StrategyUpdateOne {
	if v != nil {
		_u.SetEnableAutoExit(*v)
	}
	return _u
}

// SetEnablePushNotification sets the "enablePushNotification" field.
func (_u *StrategyUpdateOne) SetEnablePushNotification(v bool) *StrategyUpdateOne {
	_u.mutation.SetEnablePushNotification(v)
	return _u
}

// SetNillableEnablePushNotification sets the "enablePushNotification" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableEnablePushNotification(v *bool) *StrategyUpdateOne {
	if v != nil {
		_u.SetEnablePushNotification(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *StrategyUpdateOne) SetStatus(v strategy.Status) *StrategyUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableStatus(v *strategy.Status) *StrategyUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetGridTrend sets the "gridTrend" field.
func (_u *StrategyUpdateOne) SetGridTrend(v string) *StrategyUpdateOne {
	_u.mutation.SetGridTrend(v)
	return _u
}

// SetNillableGridTrend sets the "gridTrend" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableGridTrend(v *string) *StrategyUpdateOne {
	if v != nil {
		_u.SetGridTrend(*v)
	}
	return _u
}

// ClearGridTrend clears the value of the "gridTrend" field.
func (_u *StrategyUpdateOne) ClearGridTrend() *StrategyUpdateOne {
	_u.mutation.ClearGridTrend()
	return _u
}

// SetLastLowerThresholdAlertTime sets the "lastLowerThresholdAlertTime" field.
func (_u *StrategyUpdateOne) SetLastLowerThresholdAlertTime(v time.Time) *StrategyUpdateOne {
	_u.mutation.SetLastLowerThresholdAlertTime(v)
	return _u
}

// SetNillableLastLowerThresholdAlertTime sets the "lastLowerThresholdAlertTime" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableLastLowerThresholdAlertTime(v *time.Time) *StrategyUpdateOne {
	if v != nil {
		_u.SetLastLowerThresholdAlertTime(*v)
	}
	return _u
}

// ClearLastLowerThresholdAlertTime clears the value of the "lastLowerThresholdAlertTime" field.
func (_u *StrategyUpdateOne) ClearLastLowerThresholdAlertTime() *StrategyUpdateOne {
	_u.mutation.ClearLastLowerThresholdAlertTime()
	return _u
}

// SetLastUpperThresholdAlertTime sets the "lastUpperThresholdAlertTime" field.
func (_u *StrategyUpdateOne) SetLastUpperThresholdAlertTime(v time.Time) *StrategyUpdateOne {
	_u.mutation.SetLastUpperThresholdAlertTime(v)
	return _u
}

// SetNillableLastUpperThresholdAlertTime sets the "lastUpperThresholdAlertTime" field if the given value is not nil.
func (_u *StrategyUpdateOne) SetNillableLastUpperThresholdAlertTime(v *time.Time) *StrategyUpdateOne {
	if v != nil {
		_u.SetLastUpperThresholdAlertTime(*v)
	}
	return _u
}

// ClearLastUpperThresholdAlertTime clears the value of the "lastUpperThresholdAlertTime" field.
func (_u *StrategyUpdateOne) ClearLastUpperThresholdAlertTime() *StrategyUpdateOne {
	_u.mutation.ClearLastUpperThresholdAlertTime()
	return _u
}

// Mutation returns the StrategyMutation object of the builder.
func (_u *StrategyUpdateOne) Mutation() *StrategyMutation {
	return _u.mutation
}

// Where appends a list predicates to the StrategyUpdate builder.
func (_u *StrategyUpdateOne) Where(ps ...predicate.Strategy) *StrategyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StrategyUpdateOne) Select(field string, fields ...string) *StrategyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Strategy entity.
func (_u *StrategyUpdateOne) Save(ctx context.Context) (*Strategy, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StrategyUpdateOne) SaveX(ctx context.Context) *Strategy {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StrategyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StrategyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StrategyUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := strategy.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StrategyUpdateOne) check() error {
	if v, ok := _u.mutation.GUID(); ok {
		if err := strategy.GUIDValidator(v); err != nil {
			return &ValidationError{Name: "guid", err: fmt.Errorf(`ent: validator failed for field "Strategy.guid": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := strategy.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Strategy.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Symbol(); ok {
		if err := strategy.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Strategy.symbol": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MartinFactor(); ok {
		if err := strategy.MartinFactorValidator(v); err != nil {
			return &ValidationError{Name: "martinFactor", err: fmt.Errorf(`ent: validator failed for field "Strategy.martinFactor": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MaxGridLimit(); ok {
		if err := strategy.MaxGridLimitValidator(v); err != nil {
			return &ValidationError{Name: "maxGridLimit", err: fmt.Errorf(`ent: validator failed for field "Strategy.maxGridLimit": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := strategy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Strategy.status": %w`, err)}
		}
	}
	return nil
}

func (_u *StrategyUpdateOne) sqlSave(ctx context.Context) (_node *Strategy, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(strategy.Table, strategy.Columns, sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Strategy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, strategy.FieldID)
		for _, f := range fields {
			if !strategy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != strategy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(strategy.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.GUID(); ok {
		_spec.SetField(strategy.FieldGUID, field.TypeString, value)
	}
	if value, ok := _u.mutation.UserId(); ok {
		_spec.SetField(strategy.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserId(); ok {
		_spec.AddField(strategy.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(strategy.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.Symbol(); ok {
		_spec.SetField(strategy.FieldSymbol, field.TypeString, value)
	}
	if value, ok := _u.mutation.MartinFactor(); ok {
		_spec.SetField(strategy.FieldMartinFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedMartinFactor(); ok {
		_spec.AddField(strategy.FieldMartinFactor, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.MaxGridLimit(); ok {
		_spec.SetField(strategy.FieldMaxGridLimit, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedMaxGridLimit(); ok {
		_spec.AddField(strategy.FieldMaxGridLimit, field.TypeInt, value)
	}
	if _u.mutation.MaxGridLimitCleared() {
		_spec.ClearField(strategy.FieldMaxGridLimit, field.TypeInt)
	}
	if value, ok := _u.mutation.TakeProfitRatio(); ok {
		_spec.SetField(strategy.FieldTakeProfitRatio, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpperPriceBound(); ok {
		_spec.SetField(strategy.FieldUpperPriceBound, field.TypeString, value)
	}
	if value, ok := _u.mutation.LowerPriceBound(); ok {
		_spec.SetField(strategy.FieldLowerPriceBound, field.TypeString, value)
	}
	if value, ok := _u.mutation.InitialOrderSize(); ok {
		_spec.SetField(strategy.FieldInitialOrderSize, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastKlineVolume(); ok {
		_spec.SetField(strategy.FieldLastKlineVolume, field.TypeString, value)
	}
	if _u.mutation.LastKlineVolumeCleared() {
		_spec.ClearField(strategy.FieldLastKlineVolume, field.TypeString)
	}
	if value, ok := _u.mutation.FiveKlineVolume(); ok {
		_spec.SetField(strategy.FieldFiveKlineVolume, field.TypeString, value)
	}
	if _u.mutation.FiveKlineVolumeCleared() {
		_spec.ClearField(strategy.FieldFiveKlineVolume, field.TypeString)
	}
	if value, ok := _u.mutation.FirstOrderId(); ok {
		_spec.SetField(strategy.FieldFirstOrderId, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFirstOrderId(); ok {
		_spec.AddField(strategy.FieldFirstOrderId, field.TypeInt, value)
	}
	if _u.mutation.FirstOrderIdCleared() {
		_spec.ClearField(strategy.FieldFirstOrderId, field.TypeInt)
	}
	if value, ok := _u.mutation.UpperBoundExit(); ok {
		_spec.SetField(strategy.FieldUpperBoundExit, field.TypeString, value)
	}
	if _u.mutation.UpperBoundExitCleared() {
		_spec.ClearField(strategy.FieldUpperBoundExit, field.TypeString)
	}
	if value, ok := _u.mutation.StopLossExit(); ok {
		_spec.SetField(strategy.FieldStopLossExit, field.TypeString, value)
	}
	if _u.mutation.StopLossExitCleared() {
		_spec.ClearField(strategy.FieldStopLossExit, field.TypeString)
	}
	if value, ok := _u.mutation.TakeProfitExit(); ok {
		_spec.SetField(strategy.FieldTakeProfitExit, field.TypeString, value)
	}
	if _u.mutation.TakeProfitExitCleared() {
		_spec.ClearField(strategy.FieldTakeProfitExit, field.TypeString)
	}
	if value, ok := _u.mutation.GlobalTakeProfitRatio(); ok {
		_spec.SetField(strategy.FieldGlobalTakeProfitRatio, field.TypeString, value)
	}
	if _u.mutation.GlobalTakeProfitRatioCleared() {
		_spec.ClearField(strategy.FieldGlobalTakeProfitRatio, field.TypeString)
	}
	if value, ok := _u.mutation.DynamicStopLoss(); ok {
		_spec.SetField(strategy.FieldDynamicStopLoss, field.TypeBool, value)
	}
	if _u.mutation.DynamicStopLossCleared() {
		_spec.ClearField(strategy.FieldDynamicStopLoss, field.TypeBool)
	}
	if value, ok := _u.mutation.DropOn(); ok {
		_spec.SetField(strategy.FieldDropOn, field.TypeBool, value)
	}
	if _u.mutation.DropOnCleared() {
		_spec.ClearField(strategy.FieldDropOn, field.TypeBool)
	}
	if value, ok := _u.mutation.CandlesToCheck(); ok {
		_spec.SetField(strategy.FieldCandlesToCheck, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCandlesToCheck(); ok {
		_spec.AddField(strategy.FieldCandlesToCheck, field.TypeInt, value)
	}
	if _u.mutation.CandlesToCheckCleared() {
		_spec.ClearField(strategy.FieldCandlesToCheck, field.TypeInt)
	}
	if value, ok := _u.mutation.DropThreshold(); ok {
		_spec.SetField(strategy.FieldDropThreshold, field.TypeString, value)
	}
	if _u.mutation.DropThresholdCleared() {
		_spec.ClearField(strategy.FieldDropThreshold, field.TypeString)
	}
	if value, ok := _u.mutation.EnableAutoBuy(); ok {
		_spec.SetField(strategy.FieldEnableAutoBuy, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnableAutoSell(); ok {
		_spec.SetField(strategy.FieldEnableAutoSell, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnableAutoExit(); ok {
		_spec.SetField(strategy.FieldEnableAutoExit, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnablePushNotification(); ok {
		_spec.SetField(strategy.FieldEnablePushNotification, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(strategy.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.GridTrend(); ok {
		_spec.SetField(strategy.FieldGridTrend, field.TypeString, value)
	}
	if _u.mutation.GridTrendCleared() {
		_spec.ClearField(strategy.FieldGridTrend, field.TypeString)
	}
	if value, ok := _u.mutation.LastLowerThresholdAlertTime(); ok {
		_spec.SetField(strategy.FieldLastLowerThresholdAlertTime, field.TypeTime, value)
	}
	if _u.mutation.LastLowerThresholdAlertTimeCleared() {
		_spec.ClearField(strategy.FieldLastLowerThresholdAlertTime, field.TypeTime)
	}
	if value, ok := _u.mutation.LastUpperThresholdAlertTime(); ok {
		_spec.SetField(strategy.FieldLastUpperThresholdAlertTime, field.TypeTime, value)
	}
	if _u.mutation.LastUpperThresholdAlertTimeCleared() {
		_spec.ClearField(strategy.FieldLastUpperThresholdAlertTime, field.TypeTime)
	}
	_node = &Strategy{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{strategy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
