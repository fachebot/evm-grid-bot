// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/strategy"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// StrategyCreate is the builder for creating a Strategy entity.
type StrategyCreate struct {
	config
	mutation *StrategyMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *StrategyCreate) SetCreateTime(v time.Time) *StrategyCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableCreateTime(v *time.Time) *StrategyCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *StrategyCreate) SetUpdateTime(v time.Time) *StrategyCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableUpdateTime(v *time.Time) *StrategyCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetGUID sets the "guid" field.
func (_c *StrategyCreate) SetGUID(v string) *StrategyCreate {
	_c.mutation.SetGUID(v)
	return _c
}

// SetUserId sets the "userId" field.
func (_c *StrategyCreate) SetUserId(v int64) *StrategyCreate {
	_c.mutation.SetUserId(v)
	return _c
}

// SetToken sets the "token" field.
func (_c *StrategyCreate) SetToken(v string) *StrategyCreate {
	_c.mutation.SetToken(v)
	return _c
}

// SetSymbol sets the "symbol" field.
func (_c *StrategyCreate) SetSymbol(v string) *StrategyCreate {
	_c.mutation.SetSymbol(v)
	return _c
}

// SetMartinFactor sets the "martinFactor" field.
func (_c *StrategyCreate) SetMartinFactor(v float64) *StrategyCreate {
	_c.mutation.SetMartinFactor(v)
	return _c
}

// SetMaxGridLimit sets the "maxGridLimit" field.
func (_c *StrategyCreate) SetMaxGridLimit(v int) *StrategyCreate {
	_c.mutation.SetMaxGridLimit(v)
	return _c
}

// SetNillableMaxGridLimit sets the "maxGridLimit" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableMaxGridLimit(v *int) *StrategyCreate {
	if v != nil {
		_c.SetMaxGridLimit(*v)
	}
	return _c
}

// SetTakeProfitRatio sets the "takeProfitRatio" field.
func (_c *StrategyCreate) SetTakeProfitRatio(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetTakeProfitRatio(v)
	return _c
}

// SetUpperPriceBound sets the "upperPriceBound" field.
func (_c *StrategyCreate) SetUpperPriceBound(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetUpperPriceBound(v)
	return _c
}

// SetLowerPriceBound sets the "lowerPriceBound" field.
func (_c *StrategyCreate) SetLowerPriceBound(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetLowerPriceBound(v)
	return _c
}

// SetInitialOrderSize sets the "initialOrderSize" field.
func (_c *StrategyCreate) SetInitialOrderSize(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetInitialOrderSize(v)
	return _c
}

// SetLastKlineVolume sets the "lastKlineVolume" field.
func (_c *StrategyCreate) SetLastKlineVolume(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetLastKlineVolume(v)
	return _c
}

// SetNillableLastKlineVolume sets the "lastKlineVolume" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableLastKlineVolume(v *decimal.Decimal) *StrategyCreate {
	if v != nil {
		_c.SetLastKlineVolume(*v)
	}
	return _c
}

// SetFiveKlineVolume sets the "fiveKlineVolume" field.
func (_c *StrategyCreate) SetFiveKlineVolume(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetFiveKlineVolume(v)
	return _c
}

// SetNillableFiveKlineVolume sets the "fiveKlineVolume" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableFiveKlineVolume(v *decimal.Decimal) *StrategyCreate {
	if v != nil {
		_c.SetFiveKlineVolume(*v)
	}
	return _c
}

// SetFirstOrderId sets the "firstOrderId" field.
func (_c *StrategyCreate) SetFirstOrderId(v int) *StrategyCreate {
	_c.mutation.SetFirstOrderId(v)
	return _c
}

// SetNillableFirstOrderId sets the "firstOrderId" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableFirstOrderId(v *int) *StrategyCreate {
	if v != nil {
		_c.SetFirstOrderId(*v)
	}
	return _c
}

// SetUpperBoundExit sets the "upperBoundExit" field.
func (_c *StrategyCreate) SetUpperBoundExit(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetUpperBoundExit(v)
	return _c
}

// SetNillableUpperBoundExit sets the "upperBoundExit" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableUpperBoundExit(v *decimal.Decimal) *StrategyCreate {
	if v != nil {
		_c.SetUpperBoundExit(*v)
	}
	return _c
}

// SetStopLossExit sets the "stopLossExit" field.
func (_c *StrategyCreate) SetStopLossExit(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetStopLossExit(v)
	return _c
}

// SetNillableStopLossExit sets the "stopLossExit" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableStopLossExit(v *decimal.Decimal) *StrategyCreate {
	if v != nil {
		_c.SetStopLossExit(*v)
	}
	return _c
}

// SetTakeProfitExit sets the "takeProfitExit" field.
func (_c *StrategyCreate) SetTakeProfitExit(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetTakeProfitExit(v)
	return _c
}

// SetNillableTakeProfitExit sets the "takeProfitExit" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableTakeProfitExit(v *decimal.Decimal) *StrategyCreate {
	if v != nil {
		_c.SetTakeProfitExit(*v)
	}
	return _c
}

// SetGlobalTakeProfitRatio sets the "globalTakeProfitRatio" field.
func (_c *StrategyCreate) SetGlobalTakeProfitRatio(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetGlobalTakeProfitRatio(v)
	return _c
}

// SetNillableGlobalTakeProfitRatio sets the "globalTakeProfitRatio" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableGlobalTakeProfitRatio(v *decimal.Decimal) *StrategyCreate {
	if v != nil {
		_c.SetGlobalTakeProfitRatio(*v)
	}
	return _c
}

// SetDynamicStopLoss sets the "dynamicStopLoss" field.
func (_c *StrategyCreate) SetDynamicStopLoss(v bool) *StrategyCreate {
	_c.mutation.SetDynamicStopLoss(v)
	return _c
}

// SetNillableDynamicStopLoss sets the "dynamicStopLoss" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableDynamicStopLoss(v *bool) *StrategyCreate {
	if v != nil {
		_c.SetDynamicStopLoss(*v)
	}
	return _c
}

// SetDropOn sets the "dropOn" field.
func (_c *StrategyCreate) SetDropOn(v bool) *StrategyCreate {
	_c.mutation.SetDropOn(v)
	return _c
}

// SetNillableDropOn sets the "dropOn" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableDropOn(v *bool) *StrategyCreate {
	if v != nil {
		_c.SetDropOn(*v)
	}
	return _c
}

// SetCandlesToCheck sets the "candlesToCheck" field.
func (_c *StrategyCreate) SetCandlesToCheck(v int) *StrategyCreate {
	_c.mutation.SetCandlesToCheck(v)
	return _c
}

// SetNillableCandlesToCheck sets the "candlesToCheck" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableCandlesToCheck(v *int) *StrategyCreate {
	if v != nil {
		_c.SetCandlesToCheck(*v)
	}
	return _c
}

// SetDropThreshold sets the "dropThreshold" field.
func (_c *StrategyCreate) SetDropThreshold(v decimal.Decimal) *StrategyCreate {
	_c.mutation.SetDropThreshold(v)
	return _c
}

// SetNillableDropThreshold sets the "dropThreshold" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableDropThreshold(v *decimal.Decimal) *StrategyCreate {
	if v != nil {
		_c.SetDropThreshold(*v)
	}
	return _c
}

// SetEnableAutoBuy sets the "enableAutoBuy" field.
func (_c *StrategyCreate) SetEnableAutoBuy(v bool) *StrategyCreate {
	_c.mutation.SetEnableAutoBuy(v)
	return _c
}

// SetEnableAutoSell sets the "enableAutoSell" field.
func (_c *StrategyCreate) SetEnableAutoSell(v bool) *StrategyCreate {
	_c.mutation.SetEnableAutoSell(v)
	return _c
}

// SetEnableAutoExit sets the "enableAutoExit" field.
func (_c *StrategyCreate) SetEnableAutoExit(v bool) *StrategyCreate {
	_c.mutation.SetEnableAutoExit(v)
	return _c
}

// SetEnablePushNotification sets the "enablePushNotification" field.
func (_c *StrategyCreate) SetEnablePushNotification(v bool) *StrategyCreate {
	_c.mutation.SetEnablePushNotification(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *StrategyCreate) SetStatus(v strategy.Status) *StrategyCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetGridTrend sets the "gridTrend" field.
func (_c *StrategyCreate) SetGridTrend(v string) *StrategyCreate {
	_c.mutation.SetGridTrend(v)
	return _c
}

// SetNillableGridTrend sets the "gridTrend" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableGridTrend(v *string) *StrategyCreate {
	if v != nil {
		_c.SetGridTrend(*v)
	}
	return _c
}

// SetLastLowerThresholdAlertTime sets the "lastLowerThresholdAlertTime" field.
func (_c *StrategyCreate) SetLastLowerThresholdAlertTime(v time.Time) *StrategyCreate {
	_c.mutation.SetLastLowerThresholdAlertTime(v)
	return _c
}

// SetNillableLastLowerThresholdAlertTime sets the "lastLowerThresholdAlertTime" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableLastLowerThresholdAlertTime(v *time.Time) *StrategyCreate {
	if v != nil {
		_c.SetLastLowerThresholdAlertTime(*v)
	}
	return _c
}

// SetLastUpperThresholdAlertTime sets the "lastUpperThresholdAlertTime" field.
func (_c *StrategyCreate) SetLastUpperThresholdAlertTime(v time.Time) *StrategyCreate {
	_c.mutation.SetLastUpperThresholdAlertTime(v)
	return _c
}

// SetNillableLastUpperThresholdAlertTime sets the "lastUpperThresholdAlertTime" field if the given value is not nil.
func (_c *StrategyCreate) SetNillableLastUpperThresholdAlertTime(v *time.Time) *StrategyCreate {
	if v != nil {
		_c.SetLastUpperThresholdAlertTime(*v)
	}
	return _c
}

// Mutation returns the StrategyMutation object of the builder.
func (_c *StrategyCreate) Mutation() *StrategyMutation {
	return _c.mutation
}

// Save creates the Strategy in the database.
func (_c *StrategyCreate) Save(ctx context.Context) (*Strategy, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StrategyCreate) SaveX(ctx context.Context) *Strategy {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StrategyCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := strategy.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := strategy.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.CandlesToCheck(); !ok {
		v := strategy.DefaultCandlesToCheck
		_c.mutation.SetCandlesToCheck(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StrategyCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Strategy.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Strategy.update_time"`)}
	}
	if _, ok := _c.mutation.GUID(); !ok {
		return &ValidationError{Name: "guid", err: errors.New(`ent: missing required field "Strategy.guid"`)}
	}
	if v, ok := _c.mutation.GUID(); ok {
		if err := strategy.GUIDValidator(v); err != nil {
			return &ValidationError{Name: "guid", err: fmt.Errorf(`ent: validator failed for field "Strategy.guid": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "Strategy.userId"`)}
	}
	if _, ok := _c.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Strategy.token"`)}
	}
	if v, ok := _c.mutation.Token(); ok {
		if err := strategy.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "Strategy.token": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Strategy.symbol"`)}
	}
	if v, ok := _c.mutation.Symbol(); ok {
		if err := strategy.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Strategy.symbol": %w`, err)}
		}
	}
	if _, ok := _c.mutation.MartinFactor(); !ok {
		return &ValidationError{Name: "martinFactor", err: errors.New(`ent: missing required field "Strategy.martinFactor"`)}
	}
	if v, ok := _c.mutation.MartinFactor(); ok {
		if err := strategy.MartinFactorValidator(v); err != nil {
			return &ValidationError{Name: "martinFactor", err: fmt.Errorf(`ent: validator failed for field "Strategy.martinFactor": %w`, err)}
		}
	}
	if v, ok := _c.mutation.MaxGridLimit(); ok {
		if err := strategy.MaxGridLimitValidator(v); err != nil {
			return &ValidationError{Name: "maxGridLimit", err: fmt.Errorf(`ent: validator failed for field "Strategy.maxGridLimit": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TakeProfitRatio(); !ok {
		return &ValidationError{Name: "takeProfitRatio", err: errors.New(`ent: missing required field "Strategy.takeProfitRatio"`)}
	}
	if _, ok := _c.mutation.UpperPriceBound(); !ok {
		return &ValidationError{Name: "upperPriceBound", err: errors.New(`ent: missing required field "Strategy.upperPriceBound"`)}
	}
	if _, ok := _c.mutation.LowerPriceBound(); !ok {
		return &ValidationError{Name: "lowerPriceBound", err: errors.New(`ent: missing required field "Strategy.lowerPriceBound"`)}
	}
	if _, ok := _c.mutation.InitialOrderSize(); !ok {
		return &ValidationError{Name: "initialOrderSize", err: errors.New(`ent: missing required field "Strategy.initialOrderSize"`)}
	}
	if _, ok := _c.mutation.EnableAutoBuy(); !ok {
		return &ValidationError{Name: "enableAutoBuy", err: errors.New(`ent: missing required field "Strategy.enableAutoBuy"`)}
	}
	if _, ok := _c.mutation.EnableAutoSell(); !ok {
		return &ValidationError{Name: "enableAutoSell", err: errors.New(`ent: missing required field "Strategy.enableAutoSell"`)}
	}
	if _, ok := _c.mutation.EnableAutoExit(); !ok {
		return &ValidationError{Name: "enableAutoExit", err: errors.New(`ent: missing required field "Strategy.enableAutoExit"`)}
	}
	if _, ok := _c.mutation.EnablePushNotification(); !ok {
		return &ValidationError{Name: "enablePushNotification", err: errors.New(`ent: missing required field "Strategy.enablePushNotification"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Strategy.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := strategy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Strategy.status": %w`, err)}
		}
	}
	return nil
}

func (_c *StrategyCreate) sqlSave(ctx context.Context) (*Strategy, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StrategyCreate) createSpec() (*Strategy, *sqlgraph.CreateSpec) {
	var (
		_node = &Strategy{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(strategy.Table, sqlgraph.NewFieldSpec(strategy.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(strategy.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(strategy.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.GUID(); ok {
		_spec.SetField(strategy.FieldGUID, field.TypeString, value)
		_node.GUID = value
	}
	if value, ok := _c.mutation.UserId(); ok {
		_spec.SetField(strategy.FieldUserId, field.TypeInt64, value)
		_node.UserId = value
	}
	if value, ok := _c.mutation.Token(); ok {
		_spec.SetField(strategy.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := _c.mutation.Symbol(); ok {
		_spec.SetField(strategy.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := _c.mutation.MartinFactor(); ok {
		_spec.SetField(strategy.FieldMartinFactor, field.TypeFloat64, value)
		_node.MartinFactor = value
	}
	if value, ok := _c.mutation.MaxGridLimit(); ok {
		_spec.SetField(strategy.FieldMaxGridLimit, field.TypeInt, value)
		_node.MaxGridLimit = &value
	}
	if value, ok := _c.mutation.TakeProfitRatio(); ok {
		_spec.SetField(strategy.FieldTakeProfitRatio, field.TypeString, value)
		_node.TakeProfitRatio = value
	}
	if value, ok := _c.mutation.UpperPriceBound(); ok {
		_spec.SetField(strategy.FieldUpperPriceBound, field.TypeString, value)
		_node.UpperPriceBound = value
	}
	if value, ok := _c.mutation.LowerPriceBound(); ok {
		_spec.SetField(strategy.FieldLowerPriceBound, field.TypeString, value)
		_node.LowerPriceBound = value
	}
	if value, ok := _c.mutation.InitialOrderSize(); ok {
		_spec.SetField(strategy.FieldInitialOrderSize, field.TypeString, value)
		_node.InitialOrderSize = value
	}
	if value, ok := _c.mutation.LastKlineVolume(); ok {
		_spec.SetField(strategy.FieldLastKlineVolume, field.TypeString, value)
		_node.LastKlineVolume = &value
	}
	if value, ok := _c.mutation.FiveKlineVolume(); ok {
		_spec.SetField(strategy.FieldFiveKlineVolume, field.TypeString, value)
		_node.FiveKlineVolume = &value
	}
	if value, ok := _c.mutation.FirstOrderId(); ok {
		_spec.SetField(strategy.FieldFirstOrderId, field.TypeInt, value)
		_node.FirstOrderId = &value
	}
	if value, ok := _c.mutation.UpperBoundExit(); ok {
		_spec.SetField(strategy.FieldUpperBoundExit, field.TypeString, value)
		_node.UpperBoundExit = &value
	}
	if value, ok := _c.mutation.StopLossExit(); ok {
		_spec.SetField(strategy.FieldStopLossExit, field.TypeString, value)
		_node.StopLossExit = &value
	}
	if value, ok := _c.mutation.TakeProfitExit(); ok {
		_spec.SetField(strategy.FieldTakeProfitExit, field.TypeString, value)
		_node.TakeProfitExit = &value
	}
	if value, ok := _c.mutation.GlobalTakeProfitRatio(); ok {
		_spec.SetField(strategy.FieldGlobalTakeProfitRatio, field.TypeString, value)
		_node.GlobalTakeProfitRatio = &value
	}
	if value, ok := _c.mutation.DynamicStopLoss(); ok {
		_spec.SetField(strategy.FieldDynamicStopLoss, field.TypeBool, value)
		_node.DynamicStopLoss = value
	}
	if value, ok := _c.mutation.DropOn(); ok {
		_spec.SetField(strategy.FieldDropOn, field.TypeBool, value)
		_node.DropOn = value
	}
	if value, ok := _c.mutation.CandlesToCheck(); ok {
		_spec.SetField(strategy.FieldCandlesToCheck, field.TypeInt, value)
		_node.CandlesToCheck = value
	}
	if value, ok := _c.mutation.DropThreshold(); ok {
		_spec.SetField(strategy.FieldDropThreshold, field.TypeString, value)
		_node.DropThreshold = &value
	}
	if value, ok := _c.mutation.EnableAutoBuy(); ok {
		_spec.SetField(strategy.FieldEnableAutoBuy, field.TypeBool, value)
		_node.EnableAutoBuy = value
	}
	if value, ok := _c.mutation.EnableAutoSell(); ok {
		_spec.SetField(strategy.FieldEnableAutoSell, field.TypeBool, value)
		_node.EnableAutoSell = value
	}
	if value, ok := _c.mutation.EnableAutoExit(); ok {
		_spec.SetField(strategy.FieldEnableAutoExit, field.TypeBool, value)
		_node.EnableAutoExit = value
	}
	if value, ok := _c.mutation.EnablePushNotification(); ok {
		_spec.SetField(strategy.FieldEnablePushNotification, field.TypeBool, value)
		_node.EnablePushNotification = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(strategy.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.GridTrend(); ok {
		_spec.SetField(strategy.FieldGridTrend, field.TypeString, value)
		_node.GridTrend = &value
	}
	if value, ok := _c.mutation.LastLowerThresholdAlertTime(); ok {
		_spec.SetField(strategy.FieldLastLowerThresholdAlertTime, field.TypeTime, value)
		_node.LastLowerThresholdAlertTime = &value
	}
	if value, ok := _c.mutation.LastUpperThresholdAlertTime(); ok {
		_spec.SetField(strategy.FieldLastUpperThresholdAlertTime, field.TypeTime, value)
		_node.LastUpperThresholdAlertTime = &value
	}
	return _node, _spec
}

// StrategyCreateBulk is the builder for creating many Strategy entities in bulk.
type StrategyCreateBulk struct {
	config
	err      error
	builders []*StrategyCreate
}

// Save creates the Strategy entities in the database.
func (_c *StrategyCreateBulk) Save(ctx context.Context) ([]*Strategy, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Strategy, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StrategyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StrategyCreateBulk) SaveX(ctx context.Context) []*Strategy {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StrategyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StrategyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
