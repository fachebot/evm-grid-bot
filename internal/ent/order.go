// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/order"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Account holds the value of the "account" field.
	Account string `json:"account,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// GridId holds the value of the "gridId" field.
	GridId *string `json:"gridId,omitempty"`
	// GridNumber holds the value of the "gridNumber" field.
	GridNumber *int `json:"gridNumber,omitempty"`
	// GridBuyCost holds the value of the "gridBuyCost" field.
	GridBuyCost *decimal.Decimal `json:"gridBuyCost,omitempty"`
	// StrategyId holds the value of the "strategyId" field.
	StrategyId string `json:"strategyId,omitempty"`
	// Type holds the value of the "type" field.
	Type order.Type `json:"type,omitempty"`
	// Price holds the value of the "price" field.
	Price decimal.Decimal `json:"price,omitempty"`
	// FinalPrice holds the value of the "finalPrice" field.
	FinalPrice decimal.Decimal `json:"finalPrice,omitempty"`
	// InAmount holds the value of the "inAmount" field.
	InAmount decimal.Decimal `json:"inAmount,omitempty"`
	// OutAmount holds the value of the "outAmount" field.
	OutAmount decimal.Decimal `json:"outAmount,omitempty"`
	// Status holds the value of the "status" field.
	Status order.Status `json:"status,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce uint64 `json:"nonce,omitempty"`
	// TxHash holds the value of the "txHash" field.
	TxHash string `json:"txHash,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Profit holds the value of the "profit" field.
	Profit       *decimal.Decimal `json:"profit,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldGridBuyCost, order.FieldProfit:
			values[i] = &sql.NullScanner{S: new(decimal.Decimal)}
		case order.FieldPrice, order.FieldFinalPrice, order.FieldInAmount, order.FieldOutAmount:
			values[i] = new(decimal.Decimal)
		case order.FieldID, order.FieldGridNumber, order.FieldNonce:
			values[i] = new(sql.NullInt64)
		case order.FieldAccount, order.FieldToken, order.FieldSymbol, order.FieldGridId, order.FieldStrategyId, order.FieldType, order.FieldStatus, order.FieldTxHash, order.FieldReason:
			values[i] = new(sql.NullString)
		case order.FieldCreateTime, order.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (_m *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case order.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case order.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case order.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				_m.Account = value.String
			}
		case order.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				_m.Token = value.String
			}
		case order.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				_m.Symbol = value.String
			}
		case order.FieldGridId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gridId", values[i])
			} else if value.Valid {
				_m.GridId = new(string)
				*_m.GridId = value.String
			}
		case order.FieldGridNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gridNumber", values[i])
			} else if value.Valid {
				_m.GridNumber = new(int)
				*_m.GridNumber = int(value.Int64)
			}
		case order.FieldGridBuyCost:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field gridBuyCost", values[i])
			} else if value.Valid {
				_m.GridBuyCost = new(decimal.Decimal)
				*_m.GridBuyCost = *value.S.(*decimal.Decimal)
			}
		case order.FieldStrategyId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field strategyId", values[i])
			} else if value.Valid {
				_m.StrategyId = value.String
			}
		case order.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = order.Type(value.String)
			}
		case order.FieldPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value != nil {
				_m.Price = *value
			}
		case order.FieldFinalPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field finalPrice", values[i])
			} else if value != nil {
				_m.FinalPrice = *value
			}
		case order.FieldInAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field inAmount", values[i])
			} else if value != nil {
				_m.InAmount = *value
			}
		case order.FieldOutAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field outAmount", values[i])
			} else if value != nil {
				_m.OutAmount = *value
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = order.Status(value.String)
			}
		case order.FieldNonce:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				_m.Nonce = uint64(value.Int64)
			}
		case order.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txHash", values[i])
			} else if value.Valid {
				_m.TxHash = value.String
			}
		case order.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				_m.Reason = value.String
			}
		case order.FieldProfit:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field profit", values[i])
			} else if value.Valid {
				_m.Profit = new(decimal.Decimal)
				*_m.Profit = *value.S.(*decimal.Decimal)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (_m *Order) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Order) Update() *OrderUpdateOne {
	return NewOrderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Order) Unwrap() *Order {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("account=")
	builder.WriteString(_m.Account)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(_m.Token)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(_m.Symbol)
	builder.WriteString(", ")
	if v := _m.GridId; v != nil {
		builder.WriteString("gridId=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.GridNumber; v != nil {
		builder.WriteString("gridNumber=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.GridBuyCost; v != nil {
		builder.WriteString("gridBuyCost=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("strategyId=")
	builder.WriteString(_m.StrategyId)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", _m.Price))
	builder.WriteString(", ")
	builder.WriteString("finalPrice=")
	builder.WriteString(fmt.Sprintf("%v", _m.FinalPrice))
	builder.WriteString(", ")
	builder.WriteString("inAmount=")
	builder.WriteString(fmt.Sprintf("%v", _m.InAmount))
	builder.WriteString(", ")
	builder.WriteString("outAmount=")
	builder.WriteString(fmt.Sprintf("%v", _m.OutAmount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(fmt.Sprintf("%v", _m.Nonce))
	builder.WriteString(", ")
	builder.WriteString("txHash=")
	builder.WriteString(_m.TxHash)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(_m.Reason)
	builder.WriteString(", ")
	if v := _m.Profit; v != nil {
		builder.WriteString("profit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
