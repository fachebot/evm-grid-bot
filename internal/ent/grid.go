// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/grid"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// Grid is the model entity for the Grid schema.
type Grid struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// GUID holds the value of the "guid" field.
	GUID string `json:"guid,omitempty"`
	// Account holds the value of the "account" field.
	Account string `json:"account,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// StrategyId holds the value of the "strategyId" field.
	StrategyId string `json:"strategyId,omitempty"`
	// GridNumber holds the value of the "gridNumber" field.
	GridNumber int `json:"gridNumber,omitempty"`
	// OrderPrice holds the value of the "orderPrice" field.
	OrderPrice decimal.Decimal `json:"orderPrice,omitempty"`
	// FinalPrice holds the value of the "finalPrice" field.
	FinalPrice decimal.Decimal `json:"finalPrice,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount decimal.Decimal `json:"amount,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity decimal.Decimal `json:"quantity,omitempty"`
	// Status holds the value of the "status" field.
	Status       grid.Status `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Grid) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grid.FieldOrderPrice, grid.FieldFinalPrice, grid.FieldAmount, grid.FieldQuantity:
			values[i] = new(decimal.Decimal)
		case grid.FieldID, grid.FieldGridNumber:
			values[i] = new(sql.NullInt64)
		case grid.FieldGUID, grid.FieldAccount, grid.FieldToken, grid.FieldSymbol, grid.FieldStrategyId, grid.FieldStatus:
			values[i] = new(sql.NullString)
		case grid.FieldCreateTime, grid.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Grid fields.
func (_m *Grid) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grid.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case grid.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case grid.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case grid.FieldGUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guid", values[i])
			} else if value.Valid {
				_m.GUID = value.String
			}
		case grid.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				_m.Account = value.String
			}
		case grid.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				_m.Token = value.String
			}
		case grid.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				_m.Symbol = value.String
			}
		case grid.FieldStrategyId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field strategyId", values[i])
			} else if value.Valid {
				_m.StrategyId = value.String
			}
		case grid.FieldGridNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gridNumber", values[i])
			} else if value.Valid {
				_m.GridNumber = int(value.Int64)
			}
		case grid.FieldOrderPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field orderPrice", values[i])
			} else if value != nil {
				_m.OrderPrice = *value
			}
		case grid.FieldFinalPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field finalPrice", values[i])
			} else if value != nil {
				_m.FinalPrice = *value
			}
		case grid.FieldAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value != nil {
				_m.Amount = *value
			}
		case grid.FieldQuantity:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value != nil {
				_m.Quantity = *value
			}
		case grid.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = grid.Status(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Grid.
// This includes values selected through modifiers, order, etc.
func (_m *Grid) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Grid.
// Note that you need to call Grid.Unwrap() before calling this method if this Grid
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Grid) Update() *GridUpdateOne {
	return NewGridClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Grid entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Grid) Unwrap() *Grid {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Grid is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Grid) String() string {
	var builder strings.Builder
	builder.WriteString("Grid(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("guid=")
	builder.WriteString(_m.GUID)
	builder.WriteString(", ")
	builder.WriteString("account=")
	builder.WriteString(_m.Account)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(_m.Token)
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(_m.Symbol)
	builder.WriteString(", ")
	builder.WriteString("strategyId=")
	builder.WriteString(_m.StrategyId)
	builder.WriteString(", ")
	builder.WriteString("gridNumber=")
	builder.WriteString(fmt.Sprintf("%v", _m.GridNumber))
	builder.WriteString(", ")
	builder.WriteString("orderPrice=")
	builder.WriteString(fmt.Sprintf("%v", _m.OrderPrice))
	builder.WriteString(", ")
	builder.WriteString("finalPrice=")
	builder.WriteString(fmt.Sprintf("%v", _m.FinalPrice))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", _m.Amount))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Quantity))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Grids is a parsable slice of Grid.
type Grids []*Grid
