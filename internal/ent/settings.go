// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/settings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Settings is the model entity for the Settings schema.
type Settings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId int64 `json:"userId,omitempty"`
	// SlippageBps holds the value of the "slippageBps" field.
	SlippageBps int `json:"slippageBps,omitempty"`
	// SellSlippageBps holds the value of the "sellSlippageBps" field.
	SellSlippageBps *int `json:"sellSlippageBps,omitempty"`
	// ExitSlippageBps holds the value of the "exitSlippageBps" field.
	ExitSlippageBps *int `json:"exitSlippageBps,omitempty"`
	// DexAggregator holds the value of the "dexAggregator" field.
	DexAggregator settings.DexAggregator `json:"dexAggregator,omitempty"`
	// EnableInfiniteApproval holds the value of the "enableInfiniteApproval" field.
	EnableInfiniteApproval *bool `json:"enableInfiniteApproval,omitempty"`
	selectValues           sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case settings.FieldEnableInfiniteApproval:
			values[i] = new(sql.NullBool)
		case settings.FieldID, settings.FieldUserId, settings.FieldSlippageBps, settings.FieldSellSlippageBps, settings.FieldExitSlippageBps:
			values[i] = new(sql.NullInt64)
		case settings.FieldDexAggregator:
			values[i] = new(sql.NullString)
		case settings.FieldCreateTime, settings.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settings fields.
func (_m *Settings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case settings.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case settings.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case settings.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				_m.UserId = value.Int64
			}
		case settings.FieldSlippageBps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field slippageBps", values[i])
			} else if value.Valid {
				_m.SlippageBps = int(value.Int64)
			}
		case settings.FieldSellSlippageBps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sellSlippageBps", values[i])
			} else if value.Valid {
				_m.SellSlippageBps = new(int)
				*_m.SellSlippageBps = int(value.Int64)
			}
		case settings.FieldExitSlippageBps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exitSlippageBps", values[i])
			} else if value.Valid {
				_m.ExitSlippageBps = new(int)
				*_m.ExitSlippageBps = int(value.Int64)
			}
		case settings.FieldDexAggregator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dexAggregator", values[i])
			} else if value.Valid {
				_m.DexAggregator = settings.DexAggregator(value.String)
			}
		case settings.FieldEnableInfiniteApproval:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enableInfiniteApproval", values[i])
			} else if value.Valid {
				_m.EnableInfiniteApproval = new(bool)
				*_m.EnableInfiniteApproval = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Settings.
// This includes values selected through modifiers, order, etc.
func (_m *Settings) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Settings.
// Note that you need to call Settings.Unwrap() before calling this method if this Settings
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Settings) Update() *SettingsUpdateOne {
	return NewSettingsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Settings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Settings) Unwrap() *Settings {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settings is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Settings) String() string {
	var builder strings.Builder
	builder.WriteString("Settings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserId))
	builder.WriteString(", ")
	builder.WriteString("slippageBps=")
	builder.WriteString(fmt.Sprintf("%v", _m.SlippageBps))
	builder.WriteString(", ")
	if v := _m.SellSlippageBps; v != nil {
		builder.WriteString("sellSlippageBps=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.ExitSlippageBps; v != nil {
		builder.WriteString("exitSlippageBps=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("dexAggregator=")
	builder.WriteString(fmt.Sprintf("%v", _m.DexAggregator))
	builder.WriteString(", ")
	if v := _m.EnableInfiniteApproval; v != nil {
		builder.WriteString("enableInfiniteApproval=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SettingsSlice is a parsable slice of Settings.
type SettingsSlice []*Settings
