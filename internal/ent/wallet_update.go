// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/predicate"
	"github.com/fachebot/evm-grid-bot/internal/ent/wallet"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WalletUpdate is the builder for updating Wallet entities.
type WalletUpdate struct {
	config
	hooks    []Hook
	mutation *WalletMutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (_u *WalletUpdate) Where(ps ...predicate.Wallet) *WalletUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *WalletUpdate) SetUpdateTime(v time.Time) *WalletUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUserId sets the "userId" field.
func (_u *WalletUpdate) SetUserId(v int64) *WalletUpdate {
	_u.mutation.ResetUserId()
	_u.mutation.SetUserId(v)
	return _u
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (_u *WalletUpdate) SetNillableUserId(v *int64) *WalletUpdate {
	if v != nil {
		_u.SetUserId(*v)
	}
	return _u
}

// AddUserId adds value to the "userId" field.
func (_u *WalletUpdate) AddUserId(v int64) *WalletUpdate {
	_u.mutation.AddUserId(v)
	return _u
}

// SetAccount sets the "account" field.
func (_u *WalletUpdate) SetAccount(v string) *WalletUpdate {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *WalletUpdate) SetNillableAccount(v *string) *WalletUpdate {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *WalletUpdate) SetPassword(v string) *WalletUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *WalletUpdate) SetNillablePassword(v *string) *WalletUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetPrivateKey sets the "privateKey" field.
func (_u *WalletUpdate) SetPrivateKey(v string) *WalletUpdate {
	_u.mutation.SetPrivateKey(v)
	return _u
}

// SetNillablePrivateKey sets the "privateKey" field if the given value is not nil.
func (_u *WalletUpdate) SetNillablePrivateKey(v *string) *WalletUpdate {
	if v != nil {
		_u.SetPrivateKey(*v)
	}
	return _u
}

// Mutation returns the WalletMutation object of the builder.
func (_u *WalletUpdate) Mutation() *WalletMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WalletUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WalletUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WalletUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WalletUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WalletUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := wallet.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *WalletUpdate) check() error {
	if v, ok := _u.mutation.Account(); ok {
		if err := wallet.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Wallet.account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := wallet.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Wallet.password": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PrivateKey(); ok {
		if err := wallet.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "privateKey", err: fmt.Errorf(`ent: validator failed for field "Wallet.privateKey": %w`, err)}
		}
	}
	return nil
}

func (_u *WalletUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(wallet.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UserId(); ok {
		_spec.SetField(wallet.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserId(); ok {
		_spec.AddField(wallet.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(wallet.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(wallet.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.PrivateKey(); ok {
		_spec.SetField(wallet.FieldPrivateKey, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WalletUpdateOne is the builder for updating a single Wallet entity.
type WalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WalletMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *WalletUpdateOne) SetUpdateTime(v time.Time) *WalletUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUserId sets the "userId" field.
func (_u *WalletUpdateOne) SetUserId(v int64) *WalletUpdateOne {
	_u.mutation.ResetUserId()
	_u.mutation.SetUserId(v)
	return _u
}

// SetNillableUserId sets the "userId" field if the given value is not nil.
func (_u *WalletUpdateOne) SetNillableUserId(v *int64) *WalletUpdateOne {
	if v != nil {
		_u.SetUserId(*v)
	}
	return _u
}

// AddUserId adds value to the "userId" field.
func (_u *WalletUpdateOne) AddUserId(v int64) *WalletUpdateOne {
	_u.mutation.AddUserId(v)
	return _u
}

// SetAccount sets the "account" field.
func (_u *WalletUpdateOne) SetAccount(v string) *WalletUpdateOne {
	_u.mutation.SetAccount(v)
	return _u
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (_u *WalletUpdateOne) SetNillableAccount(v *string) *WalletUpdateOne {
	if v != nil {
		_u.SetAccount(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *WalletUpdateOne) SetPassword(v string) *WalletUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *WalletUpdateOne) SetNillablePassword(v *string) *WalletUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetPrivateKey sets the "privateKey" field.
func (_u *WalletUpdateOne) SetPrivateKey(v string) *WalletUpdateOne {
	_u.mutation.SetPrivateKey(v)
	return _u
}

// SetNillablePrivateKey sets the "privateKey" field if the given value is not nil.
func (_u *WalletUpdateOne) SetNillablePrivateKey(v *string) *WalletUpdateOne {
	if v != nil {
		_u.SetPrivateKey(*v)
	}
	return _u
}

// Mutation returns the WalletMutation object of the builder.
func (_u *WalletUpdateOne) Mutation() *WalletMutation {
	return _u.mutation
}

// Where appends a list predicates to the WalletUpdate builder.
func (_u *WalletUpdateOne) Where(ps ...predicate.Wallet) *WalletUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WalletUpdateOne) Select(field string, fields ...string) *WalletUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Wallet entity.
func (_u *WalletUpdateOne) Save(ctx context.Context) (*Wallet, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WalletUpdateOne) SaveX(ctx context.Context) *Wallet {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WalletUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WalletUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *WalletUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := wallet.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *WalletUpdateOne) check() error {
	if v, ok := _u.mutation.Account(); ok {
		if err := wallet.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Wallet.account": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := wallet.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Wallet.password": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PrivateKey(); ok {
		if err := wallet.PrivateKeyValidator(v); err != nil {
			return &ValidationError{Name: "privateKey", err: fmt.Errorf(`ent: validator failed for field "Wallet.privateKey": %w`, err)}
		}
	}
	return nil
}

func (_u *WalletUpdateOne) sqlSave(ctx context.Context) (_node *Wallet, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wallet.Table, wallet.Columns, sqlgraph.NewFieldSpec(wallet.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Wallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wallet.FieldID)
		for _, f := range fields {
			if !wallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(wallet.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UserId(); ok {
		_spec.SetField(wallet.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedUserId(); ok {
		_spec.AddField(wallet.FieldUserId, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Account(); ok {
		_spec.SetField(wallet.FieldAccount, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(wallet.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.PrivateKey(); ok {
		_spec.SetField(wallet.FieldPrivateKey, field.TypeString, value)
	}
	_node = &Wallet{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
