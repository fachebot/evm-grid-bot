// Code generated by ent, DO NOT EDIT.

package grid

import (
	"time"

	"github.com/fachebot/evm-grid-bot/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldUpdateTime, v))
}

// GUID applies equality check predicate on the "guid" field. It's identical to GUIDEQ.
func GUID(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldGUID, v))
}

// Account applies equality check predicate on the "account" field. It's identical to AccountEQ.
func Account(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldAccount, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldToken, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldSymbol, v))
}

// StrategyId applies equality check predicate on the "strategyId" field. It's identical to StrategyIdEQ.
func StrategyId(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldStrategyId, v))
}

// GridNumber applies equality check predicate on the "gridNumber" field. It's identical to GridNumberEQ.
func GridNumber(v int) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldGridNumber, v))
}

// OrderPrice applies equality check predicate on the "orderPrice" field. It's identical to OrderPriceEQ.
func OrderPrice(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldOrderPrice, v))
}

// FinalPrice applies equality check predicate on the "finalPrice" field. It's identical to FinalPriceEQ.
func FinalPrice(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldFinalPrice, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldAmount, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldQuantity, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldUpdateTime, v))
}

// GUIDEQ applies the EQ predicate on the "guid" field.
func GUIDEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldGUID, v))
}

// GUIDNEQ applies the NEQ predicate on the "guid" field.
func GUIDNEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldGUID, v))
}

// GUIDIn applies the In predicate on the "guid" field.
func GUIDIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldGUID, vs...))
}

// GUIDNotIn applies the NotIn predicate on the "guid" field.
func GUIDNotIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldGUID, vs...))
}

// GUIDGT applies the GT predicate on the "guid" field.
func GUIDGT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldGUID, v))
}

// GUIDGTE applies the GTE predicate on the "guid" field.
func GUIDGTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldGUID, v))
}

// GUIDLT applies the LT predicate on the "guid" field.
func GUIDLT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldGUID, v))
}

// GUIDLTE applies the LTE predicate on the "guid" field.
func GUIDLTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldGUID, v))
}

// GUIDContains applies the Contains predicate on the "guid" field.
func GUIDContains(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContains(FieldGUID, v))
}

// GUIDHasPrefix applies the HasPrefix predicate on the "guid" field.
func GUIDHasPrefix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasPrefix(FieldGUID, v))
}

// GUIDHasSuffix applies the HasSuffix predicate on the "guid" field.
func GUIDHasSuffix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasSuffix(FieldGUID, v))
}

// GUIDEqualFold applies the EqualFold predicate on the "guid" field.
func GUIDEqualFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEqualFold(FieldGUID, v))
}

// GUIDContainsFold applies the ContainsFold predicate on the "guid" field.
func GUIDContainsFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContainsFold(FieldGUID, v))
}

// AccountEQ applies the EQ predicate on the "account" field.
func AccountEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldAccount, v))
}

// AccountNEQ applies the NEQ predicate on the "account" field.
func AccountNEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldAccount, v))
}

// AccountIn applies the In predicate on the "account" field.
func AccountIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldAccount, vs...))
}

// AccountNotIn applies the NotIn predicate on the "account" field.
func AccountNotIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldAccount, vs...))
}

// AccountGT applies the GT predicate on the "account" field.
func AccountGT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldAccount, v))
}

// AccountGTE applies the GTE predicate on the "account" field.
func AccountGTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldAccount, v))
}

// AccountLT applies the LT predicate on the "account" field.
func AccountLT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldAccount, v))
}

// AccountLTE applies the LTE predicate on the "account" field.
func AccountLTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldAccount, v))
}

// AccountContains applies the Contains predicate on the "account" field.
func AccountContains(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContains(FieldAccount, v))
}

// AccountHasPrefix applies the HasPrefix predicate on the "account" field.
func AccountHasPrefix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasPrefix(FieldAccount, v))
}

// AccountHasSuffix applies the HasSuffix predicate on the "account" field.
func AccountHasSuffix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasSuffix(FieldAccount, v))
}

// AccountEqualFold applies the EqualFold predicate on the "account" field.
func AccountEqualFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEqualFold(FieldAccount, v))
}

// AccountContainsFold applies the ContainsFold predicate on the "account" field.
func AccountContainsFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContainsFold(FieldAccount, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContainsFold(FieldToken, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContainsFold(FieldSymbol, v))
}

// StrategyIdEQ applies the EQ predicate on the "strategyId" field.
func StrategyIdEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldStrategyId, v))
}

// StrategyIdNEQ applies the NEQ predicate on the "strategyId" field.
func StrategyIdNEQ(v string) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldStrategyId, v))
}

// StrategyIdIn applies the In predicate on the "strategyId" field.
func StrategyIdIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldStrategyId, vs...))
}

// StrategyIdNotIn applies the NotIn predicate on the "strategyId" field.
func StrategyIdNotIn(vs ...string) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldStrategyId, vs...))
}

// StrategyIdGT applies the GT predicate on the "strategyId" field.
func StrategyIdGT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldStrategyId, v))
}

// StrategyIdGTE applies the GTE predicate on the "strategyId" field.
func StrategyIdGTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldStrategyId, v))
}

// StrategyIdLT applies the LT predicate on the "strategyId" field.
func StrategyIdLT(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldStrategyId, v))
}

// StrategyIdLTE applies the LTE predicate on the "strategyId" field.
func StrategyIdLTE(v string) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldStrategyId, v))
}

// StrategyIdContains applies the Contains predicate on the "strategyId" field.
func StrategyIdContains(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContains(FieldStrategyId, v))
}

// StrategyIdHasPrefix applies the HasPrefix predicate on the "strategyId" field.
func StrategyIdHasPrefix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasPrefix(FieldStrategyId, v))
}

// StrategyIdHasSuffix applies the HasSuffix predicate on the "strategyId" field.
func StrategyIdHasSuffix(v string) predicate.Grid {
	return predicate.Grid(sql.FieldHasSuffix(FieldStrategyId, v))
}

// StrategyIdEqualFold applies the EqualFold predicate on the "strategyId" field.
func StrategyIdEqualFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldEqualFold(FieldStrategyId, v))
}

// StrategyIdContainsFold applies the ContainsFold predicate on the "strategyId" field.
func StrategyIdContainsFold(v string) predicate.Grid {
	return predicate.Grid(sql.FieldContainsFold(FieldStrategyId, v))
}

// GridNumberEQ applies the EQ predicate on the "gridNumber" field.
func GridNumberEQ(v int) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldGridNumber, v))
}

// GridNumberNEQ applies the NEQ predicate on the "gridNumber" field.
func GridNumberNEQ(v int) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldGridNumber, v))
}

// GridNumberIn applies the In predicate on the "gridNumber" field.
func GridNumberIn(vs ...int) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldGridNumber, vs...))
}

// GridNumberNotIn applies the NotIn predicate on the "gridNumber" field.
func GridNumberNotIn(vs ...int) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldGridNumber, vs...))
}

// GridNumberGT applies the GT predicate on the "gridNumber" field.
func GridNumberGT(v int) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldGridNumber, v))
}

// GridNumberGTE applies the GTE predicate on the "gridNumber" field.
func GridNumberGTE(v int) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldGridNumber, v))
}

// GridNumberLT applies the LT predicate on the "gridNumber" field.
func GridNumberLT(v int) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldGridNumber, v))
}

// GridNumberLTE applies the LTE predicate on the "gridNumber" field.
func GridNumberLTE(v int) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldGridNumber, v))
}

// OrderPriceEQ applies the EQ predicate on the "orderPrice" field.
func OrderPriceEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldOrderPrice, v))
}

// OrderPriceNEQ applies the NEQ predicate on the "orderPrice" field.
func OrderPriceNEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldOrderPrice, v))
}

// OrderPriceIn applies the In predicate on the "orderPrice" field.
func OrderPriceIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldOrderPrice, vs...))
}

// OrderPriceNotIn applies the NotIn predicate on the "orderPrice" field.
func OrderPriceNotIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldOrderPrice, vs...))
}

// OrderPriceGT applies the GT predicate on the "orderPrice" field.
func OrderPriceGT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldOrderPrice, v))
}

// OrderPriceGTE applies the GTE predicate on the "orderPrice" field.
func OrderPriceGTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldOrderPrice, v))
}

// OrderPriceLT applies the LT predicate on the "orderPrice" field.
func OrderPriceLT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldOrderPrice, v))
}

// OrderPriceLTE applies the LTE predicate on the "orderPrice" field.
func OrderPriceLTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldOrderPrice, v))
}

// OrderPriceContains applies the Contains predicate on the "orderPrice" field.
func OrderPriceContains(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContains(FieldOrderPrice, vc))
}

// OrderPriceHasPrefix applies the HasPrefix predicate on the "orderPrice" field.
func OrderPriceHasPrefix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasPrefix(FieldOrderPrice, vc))
}

// OrderPriceHasSuffix applies the HasSuffix predicate on the "orderPrice" field.
func OrderPriceHasSuffix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasSuffix(FieldOrderPrice, vc))
}

// OrderPriceEqualFold applies the EqualFold predicate on the "orderPrice" field.
func OrderPriceEqualFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldEqualFold(FieldOrderPrice, vc))
}

// OrderPriceContainsFold applies the ContainsFold predicate on the "orderPrice" field.
func OrderPriceContainsFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContainsFold(FieldOrderPrice, vc))
}

// FinalPriceEQ applies the EQ predicate on the "finalPrice" field.
func FinalPriceEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldFinalPrice, v))
}

// FinalPriceNEQ applies the NEQ predicate on the "finalPrice" field.
func FinalPriceNEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldFinalPrice, v))
}

// FinalPriceIn applies the In predicate on the "finalPrice" field.
func FinalPriceIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldFinalPrice, vs...))
}

// FinalPriceNotIn applies the NotIn predicate on the "finalPrice" field.
func FinalPriceNotIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldFinalPrice, vs...))
}

// FinalPriceGT applies the GT predicate on the "finalPrice" field.
func FinalPriceGT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldFinalPrice, v))
}

// FinalPriceGTE applies the GTE predicate on the "finalPrice" field.
func FinalPriceGTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldFinalPrice, v))
}

// FinalPriceLT applies the LT predicate on the "finalPrice" field.
func FinalPriceLT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldFinalPrice, v))
}

// FinalPriceLTE applies the LTE predicate on the "finalPrice" field.
func FinalPriceLTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldFinalPrice, v))
}

// FinalPriceContains applies the Contains predicate on the "finalPrice" field.
func FinalPriceContains(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContains(FieldFinalPrice, vc))
}

// FinalPriceHasPrefix applies the HasPrefix predicate on the "finalPrice" field.
func FinalPriceHasPrefix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasPrefix(FieldFinalPrice, vc))
}

// FinalPriceHasSuffix applies the HasSuffix predicate on the "finalPrice" field.
func FinalPriceHasSuffix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasSuffix(FieldFinalPrice, vc))
}

// FinalPriceEqualFold applies the EqualFold predicate on the "finalPrice" field.
func FinalPriceEqualFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldEqualFold(FieldFinalPrice, vc))
}

// FinalPriceContainsFold applies the ContainsFold predicate on the "finalPrice" field.
func FinalPriceContainsFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContainsFold(FieldFinalPrice, vc))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldAmount, v))
}

// AmountContains applies the Contains predicate on the "amount" field.
func AmountContains(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContains(FieldAmount, vc))
}

// AmountHasPrefix applies the HasPrefix predicate on the "amount" field.
func AmountHasPrefix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasPrefix(FieldAmount, vc))
}

// AmountHasSuffix applies the HasSuffix predicate on the "amount" field.
func AmountHasSuffix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasSuffix(FieldAmount, vc))
}

// AmountEqualFold applies the EqualFold predicate on the "amount" field.
func AmountEqualFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldEqualFold(FieldAmount, vc))
}

// AmountContainsFold applies the ContainsFold predicate on the "amount" field.
func AmountContainsFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContainsFold(FieldAmount, vc))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v decimal.Decimal) predicate.Grid {
	return predicate.Grid(sql.FieldLTE(FieldQuantity, v))
}

// QuantityContains applies the Contains predicate on the "quantity" field.
func QuantityContains(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContains(FieldQuantity, vc))
}

// QuantityHasPrefix applies the HasPrefix predicate on the "quantity" field.
func QuantityHasPrefix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasPrefix(FieldQuantity, vc))
}

// QuantityHasSuffix applies the HasSuffix predicate on the "quantity" field.
func QuantityHasSuffix(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldHasSuffix(FieldQuantity, vc))
}

// QuantityEqualFold applies the EqualFold predicate on the "quantity" field.
func QuantityEqualFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldEqualFold(FieldQuantity, vc))
}

// QuantityContainsFold applies the ContainsFold predicate on the "quantity" field.
func QuantityContainsFold(v decimal.Decimal) predicate.Grid {
	vc := v.String()
	return predicate.Grid(sql.FieldContainsFold(FieldQuantity, vc))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Grid {
	return predicate.Grid(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Grid {
	return predicate.Grid(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Grid {
	return predicate.Grid(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Grid {
	return predicate.Grid(sql.FieldNotIn(FieldStatus, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Grid) predicate.Grid {
	return predicate.Grid(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Grid) predicate.Grid {
	return predicate.Grid(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Grid) predicate.Grid {
	return predicate.Grid(sql.NotPredicates(p))
}
