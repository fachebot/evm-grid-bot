// Code generated by ent, DO NOT EDIT.

package grid

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the grid type in the database.
	Label = "grid"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldGUID holds the string denoting the guid field in the database.
	FieldGUID = "guid"
	// FieldAccount holds the string denoting the account field in the database.
	FieldAccount = "account"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldStrategyId holds the string denoting the strategyid field in the database.
	FieldStrategyId = "strategy_id"
	// FieldGridNumber holds the string denoting the gridnumber field in the database.
	FieldGridNumber = "grid_number"
	// FieldOrderPrice holds the string denoting the orderprice field in the database.
	FieldOrderPrice = "order_price"
	// FieldFinalPrice holds the string denoting the finalprice field in the database.
	FieldFinalPrice = "final_price"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the grid in the database.
	Table = "grids"
)

// Columns holds all SQL columns for grid fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldGUID,
	FieldAccount,
	FieldToken,
	FieldSymbol,
	FieldStrategyId,
	FieldGridNumber,
	FieldOrderPrice,
	FieldFinalPrice,
	FieldAmount,
	FieldQuantity,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// GUIDValidator is a validator for the "guid" field. It is called by the builders before save.
	GUIDValidator func(string) error
	// AccountValidator is a validator for the "account" field. It is called by the builders before save.
	AccountValidator func(string) error
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// StrategyIdValidator is a validator for the "strategyId" field. It is called by the builders before save.
	StrategyIdValidator func(string) error
	// GridNumberValidator is a validator for the "gridNumber" field. It is called by the builders before save.
	GridNumberValidator func(int) error
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusBuying  Status = "buying"
	StatusSelling Status = "selling"
	StatusBought  Status = "bought"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusBuying, StatusSelling, StatusBought:
		return nil
	default:
		return fmt.Errorf("grid: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Grid queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByGUID orders the results by the guid field.
func ByGUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGUID, opts...).ToFunc()
}

// ByAccount orders the results by the account field.
func ByAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccount, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySymbol orders the results by the symbol field.
func BySymbol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSymbol, opts...).ToFunc()
}

// ByStrategyId orders the results by the strategyId field.
func ByStrategyId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrategyId, opts...).ToFunc()
}

// ByGridNumber orders the results by the gridNumber field.
func ByGridNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGridNumber, opts...).ToFunc()
}

// ByOrderPrice orders the results by the orderPrice field.
func ByOrderPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderPrice, opts...).ToFunc()
}

// ByFinalPrice orders the results by the finalPrice field.
func ByFinalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalPrice, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
